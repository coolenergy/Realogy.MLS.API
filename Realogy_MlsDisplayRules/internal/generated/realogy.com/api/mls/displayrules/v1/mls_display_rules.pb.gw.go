// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: internal/proto/realogy/v1/mls_display_rules.proto

/*
Package v1 is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package v1

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/emptypb"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

var (
	filter_MlsDisplayRulesService_GetMlsDisplayRules_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_MlsDisplayRulesService_GetMlsDisplayRules_0(ctx context.Context, marshaler runtime.Marshaler, client MlsDisplayRulesServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMlsDisplayRulesByRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_MlsDisplayRulesService_GetMlsDisplayRules_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetMlsDisplayRules(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_MlsDisplayRulesService_GetMlsDisplayRules_0(ctx context.Context, marshaler runtime.Marshaler, server MlsDisplayRulesServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMlsDisplayRulesByRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_MlsDisplayRulesService_GetMlsDisplayRules_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetMlsDisplayRules(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0(ctx context.Context, marshaler runtime.Marshaler, client MlsDisplayRulesServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMlsDisplayRulesByRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetMlsDisplayRulesIgnoreStatus(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0(ctx context.Context, marshaler runtime.Marshaler, server MlsDisplayRulesServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMlsDisplayRulesByRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetMlsDisplayRulesIgnoreStatus(ctx, &protoReq)
	return msg, metadata, err

}

func request_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0(ctx context.Context, marshaler runtime.Marshaler, client MlsDisplayRulesServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMlsDisplayRulesBySourceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["source_system_key"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "source_system_key")
	}

	protoReq.SourceSystemKey, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "source_system_key", err)
	}

	msg, err := client.GetMlsDisplayRulesBySource(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0(ctx context.Context, marshaler runtime.Marshaler, server MlsDisplayRulesServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMlsDisplayRulesBySourceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["source_system_key"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "source_system_key")
	}

	protoReq.SourceSystemKey, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "source_system_key", err)
	}

	msg, err := server.GetMlsDisplayRulesBySource(ctx, &protoReq)
	return msg, metadata, err

}

func request_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0(ctx context.Context, marshaler runtime.Marshaler, client MlsDisplayRulesServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMlsDisplayRulesBySourceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["source_system_key"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "source_system_key")
	}

	protoReq.SourceSystemKey, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "source_system_key", err)
	}

	msg, err := client.GetMlsDisplayRulesBySourceIgnoreStatus(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0(ctx context.Context, marshaler runtime.Marshaler, server MlsDisplayRulesServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMlsDisplayRulesBySourceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["source_system_key"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "source_system_key")
	}

	protoReq.SourceSystemKey, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "source_system_key", err)
	}

	msg, err := server.GetMlsDisplayRulesBySourceIgnoreStatus(ctx, &protoReq)
	return msg, metadata, err

}

func request_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0(ctx context.Context, marshaler runtime.Marshaler, client MlsDisplayRulesServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateMlsDisplayRulesStatusRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.MlsDisplayRulesStatus); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateMlsDisplayRulesStatus(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0(ctx context.Context, marshaler runtime.Marshaler, server MlsDisplayRulesServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateMlsDisplayRulesStatusRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.MlsDisplayRulesStatus); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateMlsDisplayRulesStatus(ctx, &protoReq)
	return msg, metadata, err

}

func request_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0(ctx context.Context, marshaler runtime.Marshaler, client MlsDisplayRulesServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateMlsDisplayRulesDataRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.MlsDisplayRulesData); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateMlsDisplayRulesData(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0(ctx context.Context, marshaler runtime.Marshaler, server MlsDisplayRulesServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateMlsDisplayRulesDataRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.MlsDisplayRulesData); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateMlsDisplayRulesData(ctx, &protoReq)
	return msg, metadata, err

}

func request_MlsDisplayRulesService_StreamMlsDisplayRules_0(ctx context.Context, marshaler runtime.Marshaler, client MlsDisplayRulesServiceClient, req *http.Request, pathParams map[string]string) (MlsDisplayRulesService_StreamMlsDisplayRulesClient, runtime.ServerMetadata, error) {
	var protoReq emptypb.Empty
	var metadata runtime.ServerMetadata

	stream, err := client.StreamMlsDisplayRules(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil

}

var (
	filter_MlsDisplayRulesService_StreamMlsDisplayRulesEvent_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_MlsDisplayRulesService_StreamMlsDisplayRulesEvent_0(ctx context.Context, marshaler runtime.Marshaler, client MlsDisplayRulesServiceClient, req *http.Request, pathParams map[string]string) (MlsDisplayRulesService_StreamMlsDisplayRulesEventClient, runtime.ServerMetadata, error) {
	var protoReq StreamMlsDisplayRulesEventRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_MlsDisplayRulesService_StreamMlsDisplayRulesEvent_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	stream, err := client.StreamMlsDisplayRulesEvent(ctx, &protoReq)
	if err != nil {
		return nil, metadata, err
	}
	header, err := stream.Header()
	if err != nil {
		return nil, metadata, err
	}
	metadata.HeaderMD = header
	return stream, metadata, nil

}

func request_MlsDisplayRulesService_HealthCheck_0(ctx context.Context, marshaler runtime.Marshaler, client MlsDisplayRulesServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq HealthRequest
	var metadata runtime.ServerMetadata

	msg, err := client.HealthCheck(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_MlsDisplayRulesService_HealthCheck_0(ctx context.Context, marshaler runtime.Marshaler, server MlsDisplayRulesServiceServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq HealthRequest
	var metadata runtime.ServerMetadata

	msg, err := server.HealthCheck(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterMlsDisplayRulesServiceHandlerServer registers the http handlers for service MlsDisplayRulesService to "mux".
// UnaryRPC     :call MlsDisplayRulesServiceServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterMlsDisplayRulesServiceHandlerFromEndpoint instead.
func RegisterMlsDisplayRulesServiceHandlerServer(ctx context.Context, mux *runtime.ServeMux, server MlsDisplayRulesServiceServer) error {

	mux.Handle("GET", pattern_MlsDisplayRulesService_GetMlsDisplayRules_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/GetMlsDisplayRules", runtime.WithHTTPPathPattern("/mls/displayrules"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_MlsDisplayRulesService_GetMlsDisplayRules_0(ctx, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_GetMlsDisplayRules_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/GetMlsDisplayRulesIgnoreStatus", runtime.WithHTTPPathPattern("/mls/internal/displayrules"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0(ctx, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/GetMlsDisplayRulesBySource", runtime.WithHTTPPathPattern("/mls/displayrules/source/{source_system_key}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0(ctx, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/GetMlsDisplayRulesBySourceIgnoreStatus", runtime.WithHTTPPathPattern("/mls/internal/displayrules/source/{source_system_key}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0(ctx, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/UpdateMlsDisplayRulesStatus", runtime.WithHTTPPathPattern("/mls/displayrules"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0(ctx, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/UpdateMlsDisplayRulesData", runtime.WithHTTPPathPattern("/mls/internal/displayrules/data"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0(ctx, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_StreamMlsDisplayRules_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_StreamMlsDisplayRulesEvent_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		err := status.Error(codes.Unimplemented, "streaming calls are not yet supported in the in-process transport")
		_, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
		return
	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_HealthCheck_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/HealthCheck", runtime.WithHTTPPathPattern("/internal/health"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_MlsDisplayRulesService_HealthCheck_0(ctx, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_HealthCheck_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterMlsDisplayRulesServiceHandlerFromEndpoint is same as RegisterMlsDisplayRulesServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterMlsDisplayRulesServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterMlsDisplayRulesServiceHandler(ctx, mux, conn)
}

// RegisterMlsDisplayRulesServiceHandler registers the http handlers for service MlsDisplayRulesService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterMlsDisplayRulesServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterMlsDisplayRulesServiceHandlerClient(ctx, mux, NewMlsDisplayRulesServiceClient(conn))
}

// RegisterMlsDisplayRulesServiceHandlerClient registers the http handlers for service MlsDisplayRulesService
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "MlsDisplayRulesServiceClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "MlsDisplayRulesServiceClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "MlsDisplayRulesServiceClient" to call the correct interceptors.
func RegisterMlsDisplayRulesServiceHandlerClient(ctx context.Context, mux *runtime.ServeMux, client MlsDisplayRulesServiceClient) error {

	mux.Handle("GET", pattern_MlsDisplayRulesService_GetMlsDisplayRules_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/GetMlsDisplayRules", runtime.WithHTTPPathPattern("/mls/displayrules"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_MlsDisplayRulesService_GetMlsDisplayRules_0(ctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_GetMlsDisplayRules_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/GetMlsDisplayRulesIgnoreStatus", runtime.WithHTTPPathPattern("/mls/internal/displayrules"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0(ctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/GetMlsDisplayRulesBySource", runtime.WithHTTPPathPattern("/mls/displayrules/source/{source_system_key}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0(ctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/GetMlsDisplayRulesBySourceIgnoreStatus", runtime.WithHTTPPathPattern("/mls/internal/displayrules/source/{source_system_key}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0(ctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/UpdateMlsDisplayRulesStatus", runtime.WithHTTPPathPattern("/mls/displayrules"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0(ctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/UpdateMlsDisplayRulesData", runtime.WithHTTPPathPattern("/mls/internal/displayrules/data"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0(ctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_StreamMlsDisplayRules_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/StreamMlsDisplayRules", runtime.WithHTTPPathPattern("/mls/stream/displayrules"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_MlsDisplayRulesService_StreamMlsDisplayRules_0(ctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_StreamMlsDisplayRules_0(ctx, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_StreamMlsDisplayRulesEvent_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/StreamMlsDisplayRulesEvent", runtime.WithHTTPPathPattern("/mls/stream/displayrules/event"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_MlsDisplayRulesService_StreamMlsDisplayRulesEvent_0(ctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_StreamMlsDisplayRulesEvent_0(ctx, mux, outboundMarshaler, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_MlsDisplayRulesService_HealthCheck_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		ctx, err = runtime.AnnotateContext(ctx, mux, req, "/realogy.api.mls.displayrules.v1.MlsDisplayRulesService/HealthCheck", runtime.WithHTTPPathPattern("/internal/health"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_MlsDisplayRulesService_HealthCheck_0(ctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_MlsDisplayRulesService_HealthCheck_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_MlsDisplayRulesService_GetMlsDisplayRules_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"mls", "displayrules"}, ""))

	pattern_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"mls", "internal", "displayrules"}, ""))

	pattern_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3}, []string{"mls", "displayrules", "source", "source_system_key"}, ""))

	pattern_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 4, 1, 5, 4}, []string{"mls", "internal", "displayrules", "source", "source_system_key"}, ""))

	pattern_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"mls", "displayrules"}, ""))

	pattern_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"mls", "internal", "displayrules", "data"}, ""))

	pattern_MlsDisplayRulesService_StreamMlsDisplayRules_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"mls", "stream", "displayrules"}, ""))

	pattern_MlsDisplayRulesService_StreamMlsDisplayRulesEvent_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"mls", "stream", "displayrules", "event"}, ""))

	pattern_MlsDisplayRulesService_HealthCheck_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"internal", "health"}, ""))
)

var (
	forward_MlsDisplayRulesService_GetMlsDisplayRules_0 = runtime.ForwardResponseMessage

	forward_MlsDisplayRulesService_GetMlsDisplayRulesIgnoreStatus_0 = runtime.ForwardResponseMessage

	forward_MlsDisplayRulesService_GetMlsDisplayRulesBySource_0 = runtime.ForwardResponseMessage

	forward_MlsDisplayRulesService_GetMlsDisplayRulesBySourceIgnoreStatus_0 = runtime.ForwardResponseMessage

	forward_MlsDisplayRulesService_UpdateMlsDisplayRulesStatus_0 = runtime.ForwardResponseMessage

	forward_MlsDisplayRulesService_UpdateMlsDisplayRulesData_0 = runtime.ForwardResponseMessage

	forward_MlsDisplayRulesService_StreamMlsDisplayRules_0 = runtime.ForwardResponseStream

	forward_MlsDisplayRulesService_StreamMlsDisplayRulesEvent_0 = runtime.ForwardResponseStream

	forward_MlsDisplayRulesService_HealthCheck_0 = runtime.ForwardResponseMessage
)
