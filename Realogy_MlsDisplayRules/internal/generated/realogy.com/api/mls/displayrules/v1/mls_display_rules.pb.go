// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: internal/proto/realogy/v1/mls_display_rules.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DisplayRule int32

const (
	DisplayRule_MustDisplay    DisplayRule = 0
	DisplayRule_MustNotDisplay DisplayRule = 1
	DisplayRule_NoRestrictions DisplayRule = 2
)

// Enum value maps for DisplayRule.
var (
	DisplayRule_name = map[int32]string{
		0: "MustDisplay",
		1: "MustNotDisplay",
		2: "NoRestrictions",
	}
	DisplayRule_value = map[string]int32{
		"MustDisplay":    0,
		"MustNotDisplay": 1,
		"NoRestrictions": 2,
	}
)

func (x DisplayRule) Enum() *DisplayRule {
	p := new(DisplayRule)
	*p = x
	return p
}

func (x DisplayRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayRule) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_enumTypes[0].Descriptor()
}

func (DisplayRule) Type() protoreflect.EnumType {
	return &file_internal_proto_realogy_v1_mls_display_rules_proto_enumTypes[0]
}

func (x DisplayRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisplayRule.Descriptor instead.
func (DisplayRule) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{0}
}

// Request message for mls display rules. Accepts offset and limit as optional parameters for pagination.
type GetMlsDisplayRulesByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetMlsDisplayRulesByRequest) Reset() {
	*x = GetMlsDisplayRulesByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMlsDisplayRulesByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMlsDisplayRulesByRequest) ProtoMessage() {}

func (x *GetMlsDisplayRulesByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMlsDisplayRulesByRequest.ProtoReflect.Descriptor instead.
func (*GetMlsDisplayRulesByRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{0}
}

func (x *GetMlsDisplayRulesByRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetMlsDisplayRulesByRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Response message for mls display rules.
type GetMlsDisplayRulesByResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MlsDisplayRules []*MlsDisplayRules `protobuf:"bytes,1,rep,name=mls_display_rules,json=mlsDisplayRules,proto3" json:"mls_display_rules,omitempty"`
}

func (x *GetMlsDisplayRulesByResponse) Reset() {
	*x = GetMlsDisplayRulesByResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMlsDisplayRulesByResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMlsDisplayRulesByResponse) ProtoMessage() {}

func (x *GetMlsDisplayRulesByResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMlsDisplayRulesByResponse.ProtoReflect.Descriptor instead.
func (*GetMlsDisplayRulesByResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{1}
}

func (x *GetMlsDisplayRulesByResponse) GetMlsDisplayRules() []*MlsDisplayRules {
	if x != nil {
		return x.MlsDisplayRules
	}
	return nil
}

// Request message for mls display rules by mls source.
type GetMlsDisplayRulesBySourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSystemKey string `protobuf:"bytes,1,opt,name=source_system_key,json=sourceSystemKey,proto3" json:"source_system_key,omitempty"`
}

func (x *GetMlsDisplayRulesBySourceRequest) Reset() {
	*x = GetMlsDisplayRulesBySourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMlsDisplayRulesBySourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMlsDisplayRulesBySourceRequest) ProtoMessage() {}

func (x *GetMlsDisplayRulesBySourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMlsDisplayRulesBySourceRequest.ProtoReflect.Descriptor instead.
func (*GetMlsDisplayRulesBySourceRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{2}
}

func (x *GetMlsDisplayRulesBySourceRequest) GetSourceSystemKey() string {
	if x != nil {
		return x.SourceSystemKey
	}
	return ""
}

// The request message for update mls display rules status.
type UpdateMlsDisplayRulesStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MlsDisplayRulesStatus *MlsDisplayRulesStatus `protobuf:"bytes,1,opt,name=mlsDisplayRulesStatus,proto3" json:"mlsDisplayRulesStatus,omitempty" graphql:"mlsDisplayRulsStatus,optional" bson:"mls_display_rules_status"`
}

func (x *UpdateMlsDisplayRulesStatusRequest) Reset() {
	*x = UpdateMlsDisplayRulesStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMlsDisplayRulesStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMlsDisplayRulesStatusRequest) ProtoMessage() {}

func (x *UpdateMlsDisplayRulesStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMlsDisplayRulesStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateMlsDisplayRulesStatusRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateMlsDisplayRulesStatusRequest) GetMlsDisplayRulesStatus() *MlsDisplayRulesStatus {
	if x != nil {
		return x.MlsDisplayRulesStatus
	}
	return nil
}

// The request message for update mls display rules data.
type UpdateMlsDisplayRulesDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MlsDisplayRulesData *MlsDisplayRulesUpdateData `protobuf:"bytes,1,opt,name=mlsDisplayRulesData,proto3" json:"mlsDisplayRulesData,omitempty" graphql:"mlsDisplayRulsData,optional" bson:"mls_display_rules_data"`
}

func (x *UpdateMlsDisplayRulesDataRequest) Reset() {
	*x = UpdateMlsDisplayRulesDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMlsDisplayRulesDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMlsDisplayRulesDataRequest) ProtoMessage() {}

func (x *UpdateMlsDisplayRulesDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMlsDisplayRulesDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateMlsDisplayRulesDataRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateMlsDisplayRulesDataRequest) GetMlsDisplayRulesData() *MlsDisplayRulesUpdateData {
	if x != nil {
		return x.MlsDisplayRulesData
	}
	return nil
}

// Response message for mls display rules status update by mls source.
type UpdateMlsDisplayRulesDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MlsDisplayRules *MlsDisplayRules `protobuf:"bytes,1,opt,name=mls_display_rules,json=mlsDisplayRules,proto3" json:"mls_display_rules,omitempty"`
}

func (x *UpdateMlsDisplayRulesDataResponse) Reset() {
	*x = UpdateMlsDisplayRulesDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMlsDisplayRulesDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMlsDisplayRulesDataResponse) ProtoMessage() {}

func (x *UpdateMlsDisplayRulesDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMlsDisplayRulesDataResponse.ProtoReflect.Descriptor instead.
func (*UpdateMlsDisplayRulesDataResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateMlsDisplayRulesDataResponse) GetMlsDisplayRules() *MlsDisplayRules {
	if x != nil {
		return x.MlsDisplayRules
	}
	return nil
}

// Response message for mls display rules status update by mls source.
type MlsDisplayRulesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSystemKey string `protobuf:"bytes,1,opt,name=source_system_key,json=sourceSystemKey,proto3" json:"source_system_key,omitempty" graphql:"sourceSystemKey,optional" bson:"source_system_key"`
	IsActive        bool   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty" graphql:"isActive,optional" bson:"is_active"`
}

func (x *MlsDisplayRulesStatus) Reset() {
	*x = MlsDisplayRulesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlsDisplayRulesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlsDisplayRulesStatus) ProtoMessage() {}

func (x *MlsDisplayRulesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlsDisplayRulesStatus.ProtoReflect.Descriptor instead.
func (*MlsDisplayRulesStatus) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{6}
}

func (x *MlsDisplayRulesStatus) GetSourceSystemKey() string {
	if x != nil {
		return x.SourceSystemKey
	}
	return ""
}

func (x *MlsDisplayRulesStatus) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

// Response message for mls display rules status update by mls source.
type UpdateMlsDisplayRulesStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MlsDisplayRules *MlsDisplayRules `protobuf:"bytes,1,opt,name=mls_display_rules,json=mlsDisplayRules,proto3" json:"mls_display_rules,omitempty"`
}

func (x *UpdateMlsDisplayRulesStatusResponse) Reset() {
	*x = UpdateMlsDisplayRulesStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMlsDisplayRulesStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMlsDisplayRulesStatusResponse) ProtoMessage() {}

func (x *UpdateMlsDisplayRulesStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMlsDisplayRulesStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateMlsDisplayRulesStatusResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateMlsDisplayRulesStatusResponse) GetMlsDisplayRules() *MlsDisplayRules {
	if x != nil {
		return x.MlsDisplayRules
	}
	return nil
}

// Response message for mls display rules by mls source.
type GetMlsDisplayRulesBySourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MlsDisplayRules *MlsDisplayRules `protobuf:"bytes,1,opt,name=mls_display_rules,json=mlsDisplayRules,proto3" json:"mls_display_rules,omitempty"`
}

func (x *GetMlsDisplayRulesBySourceResponse) Reset() {
	*x = GetMlsDisplayRulesBySourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMlsDisplayRulesBySourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMlsDisplayRulesBySourceResponse) ProtoMessage() {}

func (x *GetMlsDisplayRulesBySourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMlsDisplayRulesBySourceResponse.ProtoReflect.Descriptor instead.
func (*GetMlsDisplayRulesBySourceResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{8}
}

func (x *GetMlsDisplayRulesBySourceResponse) GetMlsDisplayRules() *MlsDisplayRules {
	if x != nil {
		return x.MlsDisplayRules
	}
	return nil
}

type StreamMlsDisplayRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamMlsDisplayRulesRequest) Reset() {
	*x = StreamMlsDisplayRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMlsDisplayRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMlsDisplayRulesRequest) ProtoMessage() {}

func (x *StreamMlsDisplayRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMlsDisplayRulesRequest.ProtoReflect.Descriptor instead.
func (*StreamMlsDisplayRulesRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{9}
}

// The request message for streaming mls display rules events.
type StreamMlsDisplayRulesEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSystemKey string `protobuf:"bytes,1,opt,name=source_system_key,json=sourceSystemKey,proto3" json:"source_system_key,omitempty" graphql:"sourceSystemKey,optional" bson:"source_system_key"`
	EventType       string `protobuf:"bytes,99,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty" graphql:"eventType,optional" bson:"event_type"`
	ResumeEventId   string `protobuf:"bytes,100,opt,name=resume_event_id,json=resumeEventId,proto3" json:"resume_event_id,omitempty" graphql:"eventType,optional" bson:"resume_event_id"`
}

func (x *StreamMlsDisplayRulesEventRequest) Reset() {
	*x = StreamMlsDisplayRulesEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMlsDisplayRulesEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMlsDisplayRulesEventRequest) ProtoMessage() {}

func (x *StreamMlsDisplayRulesEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMlsDisplayRulesEventRequest.ProtoReflect.Descriptor instead.
func (*StreamMlsDisplayRulesEventRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{10}
}

func (x *StreamMlsDisplayRulesEventRequest) GetSourceSystemKey() string {
	if x != nil {
		return x.SourceSystemKey
	}
	return ""
}

func (x *StreamMlsDisplayRulesEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *StreamMlsDisplayRulesEventRequest) GetResumeEventId() string {
	if x != nil {
		return x.ResumeEventId
	}
	return ""
}

// The response message for streaming mls display rules events.
type StreamMlsDisplayRulesEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventMetaData   *EventMetaData   `protobuf:"bytes,1,opt,name=event_meta_data,json=eventMetaData,proto3" json:"id" graphql:"id,optional" bson:"_id"`
	EventType       string           `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"eventType" graphql:"eventType,optional" bson:"operationType"`
	MlsDisplayRules *MlsDisplayRules `protobuf:"bytes,3,opt,name=mls_display_rules,json=mlsDisplayRules,proto3" json:"mlsDisplayRules" graphql:"mlsDisplayRules,optional" bson:"fullDocument"`
}

func (x *StreamMlsDisplayRulesEventResponse) Reset() {
	*x = StreamMlsDisplayRulesEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMlsDisplayRulesEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMlsDisplayRulesEventResponse) ProtoMessage() {}

func (x *StreamMlsDisplayRulesEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMlsDisplayRulesEventResponse.ProtoReflect.Descriptor instead.
func (*StreamMlsDisplayRulesEventResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{11}
}

func (x *StreamMlsDisplayRulesEventResponse) GetEventMetaData() *EventMetaData {
	if x != nil {
		return x.EventMetaData
	}
	return nil
}

func (x *StreamMlsDisplayRulesEventResponse) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *StreamMlsDisplayRulesEventResponse) GetMlsDisplayRules() *MlsDisplayRules {
	if x != nil {
		return x.MlsDisplayRules
	}
	return nil
}

// Meta data for streaming events.
type EventMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty" graphql:"id,optional" bson:"_data"`
}

func (x *EventMetaData) Reset() {
	*x = EventMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetaData) ProtoMessage() {}

func (x *EventMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetaData.ProtoReflect.Descriptor instead.
func (*EventMetaData) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{12}
}

func (x *EventMetaData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Reserved message type for healthcheck.
type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{13}
}

// Response message type for health check.
type HealthReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *HealthReply) Reset() {
	*x = HealthReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthReply) ProtoMessage() {}

func (x *HealthReply) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthReply.ProtoReflect.Descriptor instead.
func (*HealthReply) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{14}
}

func (x *HealthReply) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// MLS Display Rules Data.
type MlsDisplayRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal MLS source name that's used in MDP (MLS Data Platform).
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source" graphql:"source,optional" bson:"source"`
	// URL to the copyright logo provided by the MLS that is supposed to be used on an IDX website.
	CopyrightLogo string `protobuf:"bytes,2,opt,name=copyright_logo,json=copyrightLogo,proto3" json:"copyrightLogo" graphql:"copyrightLogo,optional" bson:"copyrightLogo"`
	// A Standard Disclaimer format with some placeholder to insert appropriate company info.
	Disclaimer string `protobuf:"bytes,3,opt,name=disclaimer,proto3" json:"disclaimer" graphql:"disclaimer,optional" bson:"disclaimer"`
	// Flag that specifies if the MLS wants public comments to not be shown on an IDX website. Hide if "true". Default is "false".
	HideComments bool `protobuf:"varint,5,opt,name=hide_comments,json=hideComments,proto3" json:"hideComments" graphql:"hideComments,optional" bson:"hideComments"`
	// Flag that specifies if the last timestamp of updates for a given MLS should be displayed or not. Hide if "true". Default is "false".
	HideLastCheckedForUpdates bool `protobuf:"varint,7,opt,name=hide_last_checked_for_updates,json=hideLastCheckedForUpdates,proto3" json:"hideLastCheckedForUpdates" graphql:"hideLastCheckedForUpdates,optional" bson:"hideLastCheckedForUpdates"`
	// Flag that specifies if the like button should be shown or not. Hide if "true". Default is "false".
	HideLikeButton bool `protobuf:"varint,8,opt,name=hide_like_button,json=hideLikeButton,proto3" json:"hideLikeButton" graphql:"hideLikeButton,optional" bson:"hideLikeButton"`
	// Flag that specifies if the listing date should be shown or not. Hide if "true". Default is "false".
	HideListingDate bool `protobuf:"varint,9,opt,name=hide_listing_date,json=hideListingDate,proto3" json:"hideListingDate" graphql:"hideListingDate,optional" bson:"hideListingDate"`
	// Flag that specifies if Mortgage Calculations section should be shown or not. Hide if "true". Default is "false".
	HideMortgageCalculations bool `protobuf:"varint,10,opt,name=hide_mortgage_calculations,json=hideMortgageCalculations,proto3" json:"hideMortgageCalculations" graphql:"hideMortgageCalculations,optional" bson:"hideMortgageCalculations"`
	// Flag that specifies if the popularity index should be shown or not. Hide if "true". Default is "false".
	HidePopularity bool `protobuf:"varint,11,opt,name=hide_popularity,json=hidePopularity,proto3" json:"hidePopularity" graphql:"hidePopularity,optional" bson:"hidePopularity"`
	// Flag that specifies if the listing price history should be shown or not. Hide if "true". Default is "false".
	HidePriceHistory bool `protobuf:"varint,12,opt,name=hide_price_history,json=hidePriceHistory,proto3" json:"hidePriceHistory" graphql:"hidePriceHistory,optional" bson:"hidePriceHistory"`
	// Flag that specifies if the property insights should be shown or not. Hide if "true". Default is "false".
	HidePropertyInsights bool `protobuf:"varint,13,opt,name=hide_property_insights,json=hidePropertyInsights,proto3" json:"hidePropertyInsights" graphql:"hidePropertyInsights,optional" bson:"hidePropertyInsights"`
	// Flag that specifies if the school district information should be shown or not. Hide if "true". Default is "false".
	HideSchoolDistrict bool `protobuf:"varint,14,opt,name=hide_school_district,json=hideSchoolDistrict,proto3" json:"hideSchoolDistrict" graphql:"hideSchoolDistrict,optional" bson:"hideSchoolDistrict"`
	// Flag that specifies if the number of views of a listings on the website should be shown or not. Hide if "true". Default is "false".
	HideViews bool `protobuf:"varint,15,opt,name=hide_views,json=hideViews,proto3" json:"hideViews" graphql:"hideViews,optional" bson:"hideViews"`
	// Flag that specifies if the walk score should be shown or not. Hide if "true". Default is "false".
	HideWalkScore bool `protobuf:"varint,16,opt,name=hide_walk_score,json=hideWalkScore,proto3" json:"hideWalkScore" graphql:"hideWalkScore,optional" bson:"hideWalkScore"`
	// Flag that specifies if the year built should be shown or not. Hide if "true". Default is "false".
	HideYearBuilt         bool `protobuf:"varint,17,opt,name=hide_year_built,json=hideYearBuilt,proto3" json:"hideYearBuilt" graphql:"hideYearBuilt,optional" bson:"hideYearBuilt"`
	HonorMlsDataRectangle bool `protobuf:"varint,18,opt,name=honor_mls_data_rectangle,json=honorMlsDataRectangle,proto3" json:"honorMlsDataRectangle" graphql:"honorMlsDataRectangle,optional" bson:"honorMlsDataRectangle"`
	// House Price Appreciation Code
	HpaCode string `protobuf:"bytes,19,opt,name=hpa_code,json=hpaCode,proto3" json:"hpaCode" graphql:"hpaCode,optional" bson:"hpaCode"`
	// Flag that shows if an MLS is currently active or not. Active if "true".
	IsActive bool `protobuf:"varint,21,opt,name=is_active,json=isActive,proto3" json:"isActive" graphql:"isActive,optional" bson:"isActive"`
	// Font size to use for Listing office description. e.g. "font-18" for SC_HHMLS, "font-14" for NH_NNEREN, WI_WIREX, FIRSTMLS
	ListingOfficeSize string `protobuf:"bytes,37,opt,name=listing_office_size,json=listingOfficeSize,proto3" json:"listingOfficeSize" graphql:"listingOfficeSize,optional" bson:"listingOfficeSize"`
	// URL to the logo of the MLS that can either be downloaded or referenced.
	Logo string `protobuf:"bytes,39,opt,name=logo,proto3" json:"logo" graphql:"logo,optional" bson:"logo"`
	// Display height of the logo on a website.
	LogoDisplayHeight int32 `protobuf:"varint,40,opt,name=logo_display_height,json=logoDisplayHeight,proto3" json:"logoDisplayHeight" graphql:"logoDisplayHeight,optional" bson:"logoDisplayHeight"`
	// Actual height of the logo available.
	LogoHeight int32 `protobuf:"varint,41,opt,name=logo_height,json=logoHeight,proto3" json:"logoHeight" graphql:"logoHeight,optional" bson:"logoHeight"`
	// Actual width of the logo available.
	LogoWidth int32 `protobuf:"varint,42,opt,name=logo_width,json=logoWidth,proto3" json:"logoWidth" graphql:"logoWidth,optional" bson:"logoWidth"`
	// Long description name of the MLS.
	LongName string `protobuf:"bytes,43,opt,name=long_name,json=longName,proto3" json:"longName" graphql:"longName,optional" bson:"longName"`
	// This is the MLS public Website URL if available.
	PublicWebsiteUrl string `protobuf:"bytes,50,opt,name=public_website_url,json=publicWebsiteUrl,proto3" json:"publicWebsiteUrl" graphql:"publicWebsiteUrl,optional" bson:"publicWebsiteUrl"`
	// Short name of the MLS. Can be used to display along with long name in drop down select boxes.
	ShortName string `protobuf:"bytes,52,opt,name=short_name,json=shortName,proto3" json:"shortName" graphql:"shortName,optional" bson:"shortName"`
	// Flag that specifies if contingent listings can be shown or not. Yes if "true". Default is "false".
	ShowContingent bool `protobuf:"varint,53,opt,name=show_contingent,json=showContingent,proto3" json:"showContingent" graphql:"showContingent,optional" bson:"showContingent"`
	// Flag that specifies if listing data attribution info can be shown or not. Yes if "true". Default is "false".
	ShowDataAttribution bool `protobuf:"varint,54,opt,name=show_data_attribution,json=showDataAttribution,proto3" json:"showDataAttribution" graphql:"showDataAttribution,optional" bson:"showDataAttribution"`
	// Flag that specifies if a disclaimer has to be shown or not. Possible values are : NOT_SHOWN = 0, SHOW_PRELOGIN = 1, SHOW_POSTLOGIN = 2, SHOW_PRE_AND_POST_LOGIN = 3
	// Default is NOT_SHOWN = 0
	// use the following logic to display logo accordingly,
	// return(disclaimer != null && (showDisclaimer == SHOW_PRE_AND_POSTLOGIN || (showDisclaimer ? showLogo == SHOW_POSTLOGIN : showDisclaimer == SHOW_PRELOGIN)));
	ShowDisclaimer int32 `protobuf:"varint,56,opt,name=show_disclaimer,json=showDisclaimer,proto3" json:"showDisclaimer" graphql:"showDisclaimer,optional" bson:"showDisclaimer"`
	// Flag that specifies if listing agent for the listing can be shown or not. Yes if "true". Default is "false".
	ShowListingAgent bool `protobuf:"varint,58,opt,name=show_listing_agent,json=showListingAgent,proto3" json:"showListingAgent" graphql:"showListingAgent,optional" bson:"showListingAgent"`
	// Flag that specifies if a logo has to be shown or not. Possible values are : NOT_SHOWN = 0, SHOW_PRELOGIN = 1, SHOW_POSTLOGIN = 2, SHOW_PRE_AND_POST_LOGIN = 3
	// Default is NOT_SHOWN = 0
	// use the following logic to display logo accordingly,
	// return(logo != null && (showLogo == SHOW_PRE_AND_POSTLOGIN || (postlog ? showLogo == SHOW_POSTLOGIN : showLogo == SHOW_PRELOGIN)));
	ShowLogo int32 `protobuf:"varint,59,opt,name=show_logo,json=showLogo,proto3" json:"showLogo" graphql:"showLogo,optional" bson:"showLogo"`
	// Flag that specifies if logo of the MLS can be shown or not in a listing display. Yes if "true". Default is "false".
	ShowMlsNumber bool `protobuf:"varint,61,opt,name=show_mls_number,json=showMlsNumber,proto3" json:"showMlsNumber" graphql:"showMlsNumber,optional" bson:"showMlsNumber"`
	// Flag that specifies if new construction certificate of a listing can be shown or not. Yes if "true". Default is "false".
	ShowNewConstructionCert bool `protobuf:"varint,62,opt,name=show_new_construction_cert,json=showNewConstructionCert,proto3" json:"showNewConstructionCert" graphql:"showNewConstructionCert,optional" bson:"showNewConstructionCert"`
	// Flag that specifies if the listing office phone can be shown or not. Yes if "true". Default is "false".
	ShowOfficePhoneDetail bool `protobuf:"varint,63,opt,name=show_office_phone_detail,json=showOfficePhoneDetail,proto3" json:"showOfficePhoneDetail" graphql:"showOfficePhoneDetail,optional" bson:"showOfficePhoneDetail"`
	// Flag that specifies if the Listing Office Phone can be shown or not on the details page. Yes if "true". Default is "false".
	ShowOfficePhoneOnHd bool `protobuf:"varint,64,opt,name=show_office_phone_on_hd,json=showOfficePhoneOnHd,proto3" json:"showOfficePhoneOnHd" graphql:"showOfficePhoneOnHd,optional" bson:"showOfficePhoneOnHd"`
	// Flag that specifies if listing office phone can be shown or not on the search results page. Yes if "true". Default is "false".
	ShowOfficePhoneOnResults bool `protobuf:"varint,65,opt,name=show_office_phone_on_results,json=showOfficePhoneOnResults,proto3" json:"showOfficePhoneOnResults" graphql:"showOfficePhoneOnResults,optional" bson:"showOfficePhoneOnResults"`
	// Default is "false".
	ShowOfficePhoneResults bool `protobuf:"varint,66,opt,name=show_office_phone_results,json=showOfficePhoneResults,proto3" json:"showOfficePhoneResults" graphql:"showOfficePhoneResults,optional" bson:"showOfficePhoneResults"`
	// Flag that specifies if listing office phone can be shown or not under the agent/property photo. Yes if "true". Default is "false".
	ShowOfficeUnderPhoto bool `protobuf:"varint,67,opt,name=show_office_under_photo,json=showOfficeUnderPhoto,proto3" json:"showOfficeUnderPhoto" graphql:"showOfficeUnderPhoto,optional" bson:"showOfficeUnderPhoto"`
	// Flag that specifies if tract names for a listing can be shown or not. Yes if "true". Default is "false".
	UseTractNames bool `protobuf:"varint,71,opt,name=use_tract_names,json=useTractNames,proto3" json:"useTractNames" graphql:"useTractNames,optional" bson:"useTractNames"`
	// Flag that specifies if the agent tile should be shown or not. Possible values 0 -> MustDisplay, 1 -> MustNotDisplay and 2 -> NoRestrictions. Default is 0.
	AgentTileAttributionRule DisplayRule `protobuf:"varint,72,opt,name=agent_tile_attribution_rule,json=agentTileAttributionRule,proto3,enum=realogy.api.mls.displayrules.v1.DisplayRule" json:"agentTileAttributionRule" graphql:"agentTileAttributionRule,optional" bson:"agentTileAttributionRule"`
	// Flag that specifies if the agent phone attribution should be shown or not. Possible values 0 -> MustDisplay, 1 -> MustNotDisplay and 2 -> NoRestrictions. Default is 0.
	AgentPhoneAttributionRule DisplayRule `protobuf:"varint,73,opt,name=agent_phone_attribution_rule,json=agentPhoneAttributionRule,proto3,enum=realogy.api.mls.displayrules.v1.DisplayRule" json:"agentPhoneAttributionRule" graphql:"agentPhoneAttributionRule,optional" bson:"agentPhoneAttributionRule"`
	// Flag that specifies if the buyer agent commission should be shown or not. Possible values 0 -> MustDisplay, 1 -> MustNotDisplay and 2 -> NoRestrictions. Default is 0.
	BuyerAgentCommDisplayRule DisplayRule `protobuf:"varint,74,opt,name=buyer_agent_comm_display_rule,json=buyerAgentCommDisplayRule,proto3,enum=realogy.api.mls.displayrules.v1.DisplayRule" json:"buyerAgentCommDisplayRule" graphql:"buyerAgentCommDisplayRule,optional" bson:"buyerAgentCommDisplayRule"`
	// The standardized source system name (rdm - Referential Data Management) that should be prefixed with state code followed by underscore and the existing source name. Ex: ML (Colorado) should be CO_ML.
	RdmSourceSystemKey string `protobuf:"bytes,75,opt,name=rdm_source_system_key,json=rdmSourceSystemKey,proto3" json:"rdm_source_system_key,omitempty" graphql:"rdmSourceSystemKey,optional" bson:"rdm_source_system_key"`
}

func (x *MlsDisplayRules) Reset() {
	*x = MlsDisplayRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlsDisplayRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlsDisplayRules) ProtoMessage() {}

func (x *MlsDisplayRules) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlsDisplayRules.ProtoReflect.Descriptor instead.
func (*MlsDisplayRules) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{15}
}

func (x *MlsDisplayRules) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MlsDisplayRules) GetCopyrightLogo() string {
	if x != nil {
		return x.CopyrightLogo
	}
	return ""
}

func (x *MlsDisplayRules) GetDisclaimer() string {
	if x != nil {
		return x.Disclaimer
	}
	return ""
}

func (x *MlsDisplayRules) GetHideComments() bool {
	if x != nil {
		return x.HideComments
	}
	return false
}

func (x *MlsDisplayRules) GetHideLastCheckedForUpdates() bool {
	if x != nil {
		return x.HideLastCheckedForUpdates
	}
	return false
}

func (x *MlsDisplayRules) GetHideLikeButton() bool {
	if x != nil {
		return x.HideLikeButton
	}
	return false
}

func (x *MlsDisplayRules) GetHideListingDate() bool {
	if x != nil {
		return x.HideListingDate
	}
	return false
}

func (x *MlsDisplayRules) GetHideMortgageCalculations() bool {
	if x != nil {
		return x.HideMortgageCalculations
	}
	return false
}

func (x *MlsDisplayRules) GetHidePopularity() bool {
	if x != nil {
		return x.HidePopularity
	}
	return false
}

func (x *MlsDisplayRules) GetHidePriceHistory() bool {
	if x != nil {
		return x.HidePriceHistory
	}
	return false
}

func (x *MlsDisplayRules) GetHidePropertyInsights() bool {
	if x != nil {
		return x.HidePropertyInsights
	}
	return false
}

func (x *MlsDisplayRules) GetHideSchoolDistrict() bool {
	if x != nil {
		return x.HideSchoolDistrict
	}
	return false
}

func (x *MlsDisplayRules) GetHideViews() bool {
	if x != nil {
		return x.HideViews
	}
	return false
}

func (x *MlsDisplayRules) GetHideWalkScore() bool {
	if x != nil {
		return x.HideWalkScore
	}
	return false
}

func (x *MlsDisplayRules) GetHideYearBuilt() bool {
	if x != nil {
		return x.HideYearBuilt
	}
	return false
}

func (x *MlsDisplayRules) GetHonorMlsDataRectangle() bool {
	if x != nil {
		return x.HonorMlsDataRectangle
	}
	return false
}

func (x *MlsDisplayRules) GetHpaCode() string {
	if x != nil {
		return x.HpaCode
	}
	return ""
}

func (x *MlsDisplayRules) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *MlsDisplayRules) GetListingOfficeSize() string {
	if x != nil {
		return x.ListingOfficeSize
	}
	return ""
}

func (x *MlsDisplayRules) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MlsDisplayRules) GetLogoDisplayHeight() int32 {
	if x != nil {
		return x.LogoDisplayHeight
	}
	return 0
}

func (x *MlsDisplayRules) GetLogoHeight() int32 {
	if x != nil {
		return x.LogoHeight
	}
	return 0
}

func (x *MlsDisplayRules) GetLogoWidth() int32 {
	if x != nil {
		return x.LogoWidth
	}
	return 0
}

func (x *MlsDisplayRules) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *MlsDisplayRules) GetPublicWebsiteUrl() string {
	if x != nil {
		return x.PublicWebsiteUrl
	}
	return ""
}

func (x *MlsDisplayRules) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *MlsDisplayRules) GetShowContingent() bool {
	if x != nil {
		return x.ShowContingent
	}
	return false
}

func (x *MlsDisplayRules) GetShowDataAttribution() bool {
	if x != nil {
		return x.ShowDataAttribution
	}
	return false
}

func (x *MlsDisplayRules) GetShowDisclaimer() int32 {
	if x != nil {
		return x.ShowDisclaimer
	}
	return 0
}

func (x *MlsDisplayRules) GetShowListingAgent() bool {
	if x != nil {
		return x.ShowListingAgent
	}
	return false
}

func (x *MlsDisplayRules) GetShowLogo() int32 {
	if x != nil {
		return x.ShowLogo
	}
	return 0
}

func (x *MlsDisplayRules) GetShowMlsNumber() bool {
	if x != nil {
		return x.ShowMlsNumber
	}
	return false
}

func (x *MlsDisplayRules) GetShowNewConstructionCert() bool {
	if x != nil {
		return x.ShowNewConstructionCert
	}
	return false
}

func (x *MlsDisplayRules) GetShowOfficePhoneDetail() bool {
	if x != nil {
		return x.ShowOfficePhoneDetail
	}
	return false
}

func (x *MlsDisplayRules) GetShowOfficePhoneOnHd() bool {
	if x != nil {
		return x.ShowOfficePhoneOnHd
	}
	return false
}

func (x *MlsDisplayRules) GetShowOfficePhoneOnResults() bool {
	if x != nil {
		return x.ShowOfficePhoneOnResults
	}
	return false
}

func (x *MlsDisplayRules) GetShowOfficePhoneResults() bool {
	if x != nil {
		return x.ShowOfficePhoneResults
	}
	return false
}

func (x *MlsDisplayRules) GetShowOfficeUnderPhoto() bool {
	if x != nil {
		return x.ShowOfficeUnderPhoto
	}
	return false
}

func (x *MlsDisplayRules) GetUseTractNames() bool {
	if x != nil {
		return x.UseTractNames
	}
	return false
}

func (x *MlsDisplayRules) GetAgentTileAttributionRule() DisplayRule {
	if x != nil {
		return x.AgentTileAttributionRule
	}
	return DisplayRule_MustDisplay
}

func (x *MlsDisplayRules) GetAgentPhoneAttributionRule() DisplayRule {
	if x != nil {
		return x.AgentPhoneAttributionRule
	}
	return DisplayRule_MustDisplay
}

func (x *MlsDisplayRules) GetBuyerAgentCommDisplayRule() DisplayRule {
	if x != nil {
		return x.BuyerAgentCommDisplayRule
	}
	return DisplayRule_MustDisplay
}

func (x *MlsDisplayRules) GetRdmSourceSystemKey() string {
	if x != nil {
		return x.RdmSourceSystemKey
	}
	return ""
}

// MLS Display Rules Data.
type MlsDisplayRulesUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Add description for the fields.
	SourceSystemKey string `protobuf:"bytes,1,opt,name=source_system_key,json=sourceSystemKey,proto3" json:"source_system_key,omitempty" graphql:"sourceSystemKey,optional" bson:"source_system_key"`
	Disclaimer      string `protobuf:"bytes,3,opt,name=disclaimer,proto3" json:"disclaimer" graphql:"disclaimer,optional" bson:"disclaimer"`
	LongName        string `protobuf:"bytes,43,opt,name=long_name,json=longName,proto3" json:"longName" graphql:"longName,optional" bson:"long_name"`
}

func (x *MlsDisplayRulesUpdateData) Reset() {
	*x = MlsDisplayRulesUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlsDisplayRulesUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlsDisplayRulesUpdateData) ProtoMessage() {}

func (x *MlsDisplayRulesUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlsDisplayRulesUpdateData.ProtoReflect.Descriptor instead.
func (*MlsDisplayRulesUpdateData) Descriptor() ([]byte, []int) {
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP(), []int{16}
}

func (x *MlsDisplayRulesUpdateData) GetSourceSystemKey() string {
	if x != nil {
		return x.SourceSystemKey
	}
	return ""
}

func (x *MlsDisplayRulesUpdateData) GetDisclaimer() string {
	if x != nil {
		return x.Disclaimer
	}
	return ""
}

func (x *MlsDisplayRulesUpdateData) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

var File_internal_proto_realogy_v1_mls_display_rules_proto protoreflect.FileDescriptor

var file_internal_proto_realogy_v1_mls_display_rules_proto_rawDesc = []byte{
	0x0a, 0x31, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6c, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x6c,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x7c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c,
	0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x0f, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x4f, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4b, 0x65, 0x79, 0x22, 0xe1, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6c,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x15, 0x6d,
	0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x65, 0x61,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6c, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x4c, 0x9a, 0x84, 0x9e, 0x03, 0x47, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x3a, 0x22, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x52, 0x15, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xb6, 0x01, 0x0a,
	0x13, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x65, 0x61,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6c, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x48, 0x9a, 0x84, 0x9e, 0x03, 0x43, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x75, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x52, 0x13, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x6d,
	0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0f, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x4d, 0x6c,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40,
	0x9a, 0x84, 0x9e, 0x03, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x2c, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x22,
	0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65,
	0x79, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x9a, 0x84, 0x9e, 0x03, 0x2c, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x3a, 0x22, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2c, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6c, 0x73, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x6c, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0f, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d,
	0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x11, 0x6d, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6c, 0x73, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0f, 0x6d, 0x6c, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x1c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc7, 0x02, 0x0a,
	0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x6c, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x9a,
	0x84, 0x9e, 0x03, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x2c, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x52,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x52, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x9a, 0x84, 0x9e, 0x03, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x3a, 0x22, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x9a,
	0x84, 0x9e, 0x03, 0x33, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc9, 0x03, 0x0a, 0x22, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x42, 0x2f, 0x9a, 0x84, 0x9e, 0x03, 0x2a, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x20, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x9a, 0x84, 0x9e,
	0x03, 0x42, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0xb0, 0x01, 0x0a, 0x11, 0x6d, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6c,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x52, 0x9a,
	0x84, 0x9e, 0x03, 0x4d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x6d, 0x6c, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2c, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x6c, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x20, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x75, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x52, 0x0f, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x4c, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0x9a, 0x84, 0x9e, 0x03, 0x22, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a,
	0x22, 0x69, 0x64, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x25, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x2e, 0x0a, 0x0f, 0x4d, 0x6c, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x9a, 0x84,
	0x9e, 0x03, 0x35, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x76, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x9a, 0x84, 0x9e, 0x03, 0x4a, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c,
	0x6f, 0x67, 0x6f, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x66, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x9a, 0x84,
	0x9e, 0x03, 0x41, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x64, 0x69, 0x73, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x72, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0x71, 0x0a, 0x0d, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4c, 0x9a, 0x84, 0x9e, 0x03, 0x47, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x1d, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x73, 0x9a, 0x84, 0x9e,
	0x03, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x20,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x52, 0x19, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x10, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x52, 0x9a, 0x84, 0x9e, 0x03, 0x4d, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x69,
	0x6b, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x4c,
	0x69, 0x6b, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x68, 0x69,
	0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x55, 0x9a, 0x84, 0x9e, 0x03, 0x50, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0f, 0x68, 0x69,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0xae, 0x01,
	0x0a, 0x1a, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x70, 0x9a, 0x84, 0x9e, 0x03, 0x6b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4d,
	0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x4d,
	0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x52, 0x18, 0x68, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7b,
	0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x52, 0x9a, 0x84, 0x9e, 0x03, 0x4d, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x52, 0x0e, 0x68, 0x69, 0x64,
	0x65, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x12,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x58, 0x9a, 0x84, 0x9e, 0x03, 0x53, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x52, 0x10, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x64, 0x9a, 0x84, 0x9e, 0x03, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x20,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x52, 0x14, 0x68, 0x69, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x6f, 0x6f,
	0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x5e, 0x9a, 0x84, 0x9e, 0x03, 0x59, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22,
	0x68, 0x69, 0x64, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64,
	0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22,
	0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x43, 0x9a, 0x84, 0x9e, 0x03, 0x3e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x73, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73, 0x22, 0x20, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73, 0x22, 0x52, 0x09, 0x68,
	0x69, 0x64, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x77, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65,
	0x5f, 0x77, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x4f, 0x9a, 0x84, 0x9e, 0x03, 0x4a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a,
	0x22, 0x68, 0x69, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2c, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68,
	0x69, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x20, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x52, 0x0d, 0x68, 0x69, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x77, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4f, 0x9a, 0x84, 0x9e, 0x03,
	0x4a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x69, 0x64,
	0x65, 0x59, 0x65, 0x61, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x22, 0x52, 0x0d, 0x68, 0x69, 0x64,
	0x65, 0x59, 0x65, 0x61, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x18, 0x68,
	0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x6d, 0x6c, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x67, 0x9a,
	0x84, 0x9e, 0x03, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68, 0x6f, 0x6e,
	0x6f, 0x72, 0x4d, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x4d, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x4d, 0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x74,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x52, 0x15, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x4d, 0x6c, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x58, 0x0a,
	0x08, 0x68, 0x70, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3d, 0x9a, 0x84, 0x9e, 0x03, 0x38, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x68,
	0x70, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x70, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x20,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x70, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x07,
	0x68, 0x70, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x40, 0x9a, 0x84, 0x9e, 0x03,
	0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x20, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x5b, 0x9a, 0x84, 0x9e, 0x03, 0x56, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x3a, 0x22, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x34, 0x9a, 0x84, 0x9e, 0x03, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x3a, 0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x20, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x8b,
	0x01, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x42, 0x5b, 0x9a, 0x84,
	0x9e, 0x03, 0x56, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x6c, 0x6f, 0x67, 0x6f,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f,
	0x67, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x6f, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x67, 0x0a, 0x0b,
	0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x46, 0x9a, 0x84, 0x9e, 0x03, 0x41, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a,
	0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x67, 0x6f,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f,
	0x67, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x43, 0x9a, 0x84, 0x9e, 0x03, 0x3e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x20, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x6f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x9a, 0x84,
	0x9e, 0x03, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x6c, 0x6f, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x08,
	0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x9a, 0x84, 0x9e, 0x03, 0x53, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x55, 0x72, 0x6c, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x52,
	0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x62, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x9a, 0x84, 0x9e, 0x03, 0x3e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x42, 0x52,
	0x9a, 0x84, 0x9e, 0x03, 0x4d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x68,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x2c, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e,
	0x74, 0x22, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x61, 0x9a, 0x84, 0x9e, 0x03, 0x5c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x0f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x52, 0x9a, 0x84, 0x9e, 0x03, 0x4d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x72, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72,
	0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x22, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x69, 0x73,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x58, 0x9a, 0x84, 0x9e, 0x03, 0x53, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x10,
	0x73, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x5d, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x40, 0x9a, 0x84, 0x9e, 0x03, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x6f, 0x2c, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77,
	0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x77, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x6c, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4f, 0x9a, 0x84, 0x9e, 0x03, 0x4a, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6c, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6c, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4d,
	0x6c, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x4d,
	0x6c, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xaa, 0x01, 0x0a, 0x1a, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6d, 0x9a,
	0x84, 0x9e, 0x03, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f,
	0x77, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x72, 0x74, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x22, 0x20, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x22, 0x52, 0x17, 0x73, 0x68,
	0x6f, 0x77, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x65, 0x72, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x67, 0x9a, 0x84, 0x9e, 0x03, 0x62, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2c, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68,
	0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x97, 0x01, 0x0a, 0x17, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x68, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x42, 0x61, 0x9a, 0x84, 0x9e, 0x03,
	0x5c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x48, 0x64, 0x2c, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68,
	0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x48,
	0x64, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x48, 0x64, 0x22, 0x52, 0x13, 0x73,
	0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e,
	0x48, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x42, 0x70, 0x9a, 0x84, 0x9e, 0x03, 0x6b,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x52, 0x18, 0x73, 0x68, 0x6f,
	0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6a, 0x9a, 0x84, 0x9e, 0x03, 0x65,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2c,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68,
	0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x64, 0x9a, 0x84, 0x9e, 0x03, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x73,
	0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x77, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x4f, 0x9a, 0x84, 0x9e, 0x03, 0x4a, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0xdd, 0x01, 0x0a, 0x1b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x61,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x70, 0x9a, 0x84, 0x9e, 0x03, 0x6b, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x52, 0x18, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0xe2, 0x01, 0x0a, 0x1c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x73, 0x9a, 0x84, 0x9e, 0x03, 0x6e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x20, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x52, 0x19,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0xe3, 0x01, 0x0a, 0x1d, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x42,
	0x73, 0x9a, 0x84, 0x9e, 0x03, 0x6e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x62, 0x75, 0x79, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x62, 0x75, 0x79, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x22, 0x52, 0x19, 0x62, 0x75, 0x79, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x7a, 0x0a, 0x15, 0x72, 0x64, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47,
	0x9a, 0x84, 0x9e, 0x03, 0x42, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x72, 0x64,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79,
	0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x72, 0x64, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x12, 0x72, 0x64, 0x6d, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0xd1, 0x02, 0x0a, 0x19,
	0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6c, 0x0a, 0x11, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x9a, 0x84, 0x9e, 0x03, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x71, 0x6c, 0x3a, 0x22, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4b, 0x65, 0x79, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x66, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x9a, 0x84, 0x9e,
	0x03, 0x41, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x3a, 0x22, 0x64, 0x69, 0x73, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x72, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72,
	0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x72, 0x22, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x5e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x41, 0x9a, 0x84, 0x9e, 0x03, 0x3c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x3a, 0x22, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x6e, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x2a,
	0x46, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x75, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x75, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x02, 0x32, 0xfe, 0x0d, 0x0a, 0x16, 0x4d, 0x6c, 0x73, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11,
	0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0xc1, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6d, 0x6c, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6c,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42,
	0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12,
	0x35, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0xda, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x11, 0x2f, 0x6d, 0x6c, 0x73, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x15, 0x6d, 0x6c,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0xe0, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6c,
	0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x41, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6c, 0x73,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36,
	0x22, 0x1f, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x13, 0x6d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6c, 0x73, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x30, 0x01, 0x12, 0xcf,
	0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x43, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6c, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01,
	0x12, 0x85, 0x01, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x2e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6c, 0x73, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x42, 0x4c, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6c, 0x73, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x50,
	0x01, 0x5a, 0x23, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x6c, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescOnce sync.Once
	file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescData = file_internal_proto_realogy_v1_mls_display_rules_proto_rawDesc
)

func file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescGZIP() []byte {
	file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescOnce.Do(func() {
		file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescData)
	})
	return file_internal_proto_realogy_v1_mls_display_rules_proto_rawDescData
}

var file_internal_proto_realogy_v1_mls_display_rules_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_internal_proto_realogy_v1_mls_display_rules_proto_goTypes = []interface{}{
	(DisplayRule)(0),                            // 0: realogy.api.mls.displayrules.v1.DisplayRule
	(*GetMlsDisplayRulesByRequest)(nil),         // 1: realogy.api.mls.displayrules.v1.GetMlsDisplayRulesByRequest
	(*GetMlsDisplayRulesByResponse)(nil),        // 2: realogy.api.mls.displayrules.v1.GetMlsDisplayRulesByResponse
	(*GetMlsDisplayRulesBySourceRequest)(nil),   // 3: realogy.api.mls.displayrules.v1.GetMlsDisplayRulesBySourceRequest
	(*UpdateMlsDisplayRulesStatusRequest)(nil),  // 4: realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesStatusRequest
	(*UpdateMlsDisplayRulesDataRequest)(nil),    // 5: realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesDataRequest
	(*UpdateMlsDisplayRulesDataResponse)(nil),   // 6: realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesDataResponse
	(*MlsDisplayRulesStatus)(nil),               // 7: realogy.api.mls.displayrules.v1.MlsDisplayRulesStatus
	(*UpdateMlsDisplayRulesStatusResponse)(nil), // 8: realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesStatusResponse
	(*GetMlsDisplayRulesBySourceResponse)(nil),  // 9: realogy.api.mls.displayrules.v1.GetMlsDisplayRulesBySourceResponse
	(*StreamMlsDisplayRulesRequest)(nil),        // 10: realogy.api.mls.displayrules.v1.StreamMlsDisplayRulesRequest
	(*StreamMlsDisplayRulesEventRequest)(nil),   // 11: realogy.api.mls.displayrules.v1.StreamMlsDisplayRulesEventRequest
	(*StreamMlsDisplayRulesEventResponse)(nil),  // 12: realogy.api.mls.displayrules.v1.StreamMlsDisplayRulesEventResponse
	(*EventMetaData)(nil),                       // 13: realogy.api.mls.displayrules.v1.EventMetaData
	(*HealthRequest)(nil),                       // 14: realogy.api.mls.displayrules.v1.HealthRequest
	(*HealthReply)(nil),                         // 15: realogy.api.mls.displayrules.v1.HealthReply
	(*MlsDisplayRules)(nil),                     // 16: realogy.api.mls.displayrules.v1.MlsDisplayRules
	(*MlsDisplayRulesUpdateData)(nil),           // 17: realogy.api.mls.displayrules.v1.MlsDisplayRulesUpdateData
	(*emptypb.Empty)(nil),                       // 18: google.protobuf.Empty
}
var file_internal_proto_realogy_v1_mls_display_rules_proto_depIdxs = []int32{
	16, // 0: realogy.api.mls.displayrules.v1.GetMlsDisplayRulesByResponse.mls_display_rules:type_name -> realogy.api.mls.displayrules.v1.MlsDisplayRules
	7,  // 1: realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesStatusRequest.mlsDisplayRulesStatus:type_name -> realogy.api.mls.displayrules.v1.MlsDisplayRulesStatus
	17, // 2: realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesDataRequest.mlsDisplayRulesData:type_name -> realogy.api.mls.displayrules.v1.MlsDisplayRulesUpdateData
	16, // 3: realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesDataResponse.mls_display_rules:type_name -> realogy.api.mls.displayrules.v1.MlsDisplayRules
	16, // 4: realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesStatusResponse.mls_display_rules:type_name -> realogy.api.mls.displayrules.v1.MlsDisplayRules
	16, // 5: realogy.api.mls.displayrules.v1.GetMlsDisplayRulesBySourceResponse.mls_display_rules:type_name -> realogy.api.mls.displayrules.v1.MlsDisplayRules
	13, // 6: realogy.api.mls.displayrules.v1.StreamMlsDisplayRulesEventResponse.event_meta_data:type_name -> realogy.api.mls.displayrules.v1.EventMetaData
	16, // 7: realogy.api.mls.displayrules.v1.StreamMlsDisplayRulesEventResponse.mls_display_rules:type_name -> realogy.api.mls.displayrules.v1.MlsDisplayRules
	0,  // 8: realogy.api.mls.displayrules.v1.MlsDisplayRules.agent_tile_attribution_rule:type_name -> realogy.api.mls.displayrules.v1.DisplayRule
	0,  // 9: realogy.api.mls.displayrules.v1.MlsDisplayRules.agent_phone_attribution_rule:type_name -> realogy.api.mls.displayrules.v1.DisplayRule
	0,  // 10: realogy.api.mls.displayrules.v1.MlsDisplayRules.buyer_agent_comm_display_rule:type_name -> realogy.api.mls.displayrules.v1.DisplayRule
	1,  // 11: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.GetMlsDisplayRules:input_type -> realogy.api.mls.displayrules.v1.GetMlsDisplayRulesByRequest
	1,  // 12: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.GetMlsDisplayRulesIgnoreStatus:input_type -> realogy.api.mls.displayrules.v1.GetMlsDisplayRulesByRequest
	3,  // 13: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.GetMlsDisplayRulesBySource:input_type -> realogy.api.mls.displayrules.v1.GetMlsDisplayRulesBySourceRequest
	3,  // 14: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.GetMlsDisplayRulesBySourceIgnoreStatus:input_type -> realogy.api.mls.displayrules.v1.GetMlsDisplayRulesBySourceRequest
	4,  // 15: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.UpdateMlsDisplayRulesStatus:input_type -> realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesStatusRequest
	5,  // 16: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.UpdateMlsDisplayRulesData:input_type -> realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesDataRequest
	18, // 17: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.StreamMlsDisplayRules:input_type -> google.protobuf.Empty
	11, // 18: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.StreamMlsDisplayRulesEvent:input_type -> realogy.api.mls.displayrules.v1.StreamMlsDisplayRulesEventRequest
	14, // 19: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.HealthCheck:input_type -> realogy.api.mls.displayrules.v1.HealthRequest
	2,  // 20: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.GetMlsDisplayRules:output_type -> realogy.api.mls.displayrules.v1.GetMlsDisplayRulesByResponse
	2,  // 21: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.GetMlsDisplayRulesIgnoreStatus:output_type -> realogy.api.mls.displayrules.v1.GetMlsDisplayRulesByResponse
	9,  // 22: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.GetMlsDisplayRulesBySource:output_type -> realogy.api.mls.displayrules.v1.GetMlsDisplayRulesBySourceResponse
	9,  // 23: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.GetMlsDisplayRulesBySourceIgnoreStatus:output_type -> realogy.api.mls.displayrules.v1.GetMlsDisplayRulesBySourceResponse
	8,  // 24: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.UpdateMlsDisplayRulesStatus:output_type -> realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesStatusResponse
	6,  // 25: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.UpdateMlsDisplayRulesData:output_type -> realogy.api.mls.displayrules.v1.UpdateMlsDisplayRulesDataResponse
	16, // 26: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.StreamMlsDisplayRules:output_type -> realogy.api.mls.displayrules.v1.MlsDisplayRules
	12, // 27: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.StreamMlsDisplayRulesEvent:output_type -> realogy.api.mls.displayrules.v1.StreamMlsDisplayRulesEventResponse
	15, // 28: realogy.api.mls.displayrules.v1.MlsDisplayRulesService.HealthCheck:output_type -> realogy.api.mls.displayrules.v1.HealthReply
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_internal_proto_realogy_v1_mls_display_rules_proto_init() }
func file_internal_proto_realogy_v1_mls_display_rules_proto_init() {
	if File_internal_proto_realogy_v1_mls_display_rules_proto != nil {
		return
	}
	file_internal_proto_realogy_v1_tagger_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMlsDisplayRulesByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMlsDisplayRulesByResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMlsDisplayRulesBySourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMlsDisplayRulesStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMlsDisplayRulesDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMlsDisplayRulesDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlsDisplayRulesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMlsDisplayRulesStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMlsDisplayRulesBySourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMlsDisplayRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMlsDisplayRulesEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMlsDisplayRulesEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlsDisplayRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlsDisplayRulesUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_proto_realogy_v1_mls_display_rules_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_proto_realogy_v1_mls_display_rules_proto_goTypes,
		DependencyIndexes: file_internal_proto_realogy_v1_mls_display_rules_proto_depIdxs,
		EnumInfos:         file_internal_proto_realogy_v1_mls_display_rules_proto_enumTypes,
		MessageInfos:      file_internal_proto_realogy_v1_mls_display_rules_proto_msgTypes,
	}.Build()
	File_internal_proto_realogy_v1_mls_display_rules_proto = out.File
	file_internal_proto_realogy_v1_mls_display_rules_proto_rawDesc = nil
	file_internal_proto_realogy_v1_mls_display_rules_proto_goTypes = nil
	file_internal_proto_realogy_v1_mls_display_rules_proto_depIdxs = nil
}
