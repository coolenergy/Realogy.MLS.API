{
  "swagger": "2.0",
  "info": {
    "title": "realogy/api/mls/v1/mls_listing.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "MlsListingService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/internal/health": {
      "get": {
        "summary": "Health Check.",
        "operationId": "MlsListingService_HealthCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HealthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/address/{unparsedAddress}": {
      "get": {
        "summary": "Experimental API. Get Listings for a given address. This api returns listings for a matching unparsed address in text format.\nBy default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByAddressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "unparsedAddress",
            "description": "The UnparsedAddress is a text representation of the address with the full civic location as a single entity. It may optionally include any of City, StateOrProvince, PostalCode and Country.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "city",
            "description": "The city in listing address.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "Text field containing the accepted postal abbreviation for the state or province.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "postalCode",
            "description": "The postal code portion of a street or mailing address.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/address/{unparsedAddress}/city/{city}/state/{state}/postalcode/{postalCode}": {
      "get": {
        "summary": "Experimental API. Get Listings for a given address. This api returns listings for a matching unparsed address in text format.\nBy default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByAddress2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByAddressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "unparsedAddress",
            "description": "The UnparsedAddress is a text representation of the address with the full civic location as a single entity. It may optionally include any of City, StateOrProvince, PostalCode and Country.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "city",
            "description": "The city in listing address.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "description": "Text field containing the accepted postal abbreviation for the state or province.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postalCode",
            "description": "The postal code portion of a street or mailing address.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/agent/master/{listAgentMasterId}": {
      "get": {
        "summary": "Get Listings for a given List Agent Master Id.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByAgentMasterId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByAgentMasterIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listAgentMasterId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/agent/{listAgentMlsId}": {
      "get": {
        "summary": "Get Listings for a given Mls AgentId. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByAgentId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByAgentIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listAgentMlsId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier of the Mls Source.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/agent/{listAgentMlsId}/source/{sourceSystemKey}": {
      "get": {
        "summary": "Get Listings for a given Mls AgentId. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByAgentId2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByAgentIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listAgentMlsId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier of the Mls Source.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/changes": {
      "get": {
        "summary": "Listings changes or events streaming API. By default, this api streams all the events related to mls listings in real time using http2.\nReponse of this api encloses mls listings with event meta data(mlsChange) with attributes,\n1. \"marker\" - Unique id for an event. This id can be used as query param in the request(marker=\u003cmarker id of previous successful change\u003e) to resume the changes in case of failure,\n2. \"changeType\" - MLS Change Type (insert, update, replace, delete),\n3. \"changeTime\" - MLS Change Time.\nDefault idle timeout is 120 seconds.",
        "operationId": "MlsListingService_StreamMlsListingEvent",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1StreamMlsListingEventResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1StreamMlsListingEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceSystemKey",
            "description": "Unique value for a Mls Source. Optional request parameter to listen for mls changes specific to a mls source.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyType",
            "description": "Optional request parameter to listen mls changes specific to a property type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "changeStartTime",
            "description": "Start time to send mls events.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "changeType",
            "description": "Optional parameter to listen for mls changes specific to a change type such as \"insert, replace or delete\".",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "marker",
            "description": "Unique id for an mls change events. Optional request parameter that can be used to resume changes from the last successful event.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "description": "Experimental parameter. Not intended to be used and no effect.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/city/{city}": {
      "get": {
        "summary": "Get Listings for a given City and State. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByCity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByCityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "city",
            "description": "The city to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to search mls.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/city/{city}/state/{state}": {
      "get": {
        "summary": "Get Listings for a given City and State. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByCity2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByCityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "city",
            "description": "The city to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/company/master/{companyMasterId}": {
      "get": {
        "summary": "Get Listings for a given List Company Master Id.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByCompanyMasterId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByCompanyMasterIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyMasterId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/dash/agent/{listingAgentGuid}": {
      "get": {
        "summary": "Get Listings for a given Listing Agent Guid (DashMls). By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByAgentGuid",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByAgentGuidResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listingAgentGuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/dash/listing/{listingGuid}": {
      "get": {
        "summary": "Get Listings for a given Listing Guid (Dash specific unique id for a listing). This API may return multiple listings for a listing id if there are multiple mls sources associated.\nUse \"source\" in the request path to narrow the result to particular mls source.",
        "operationId": "MlsListingService_GetMlsListingByListingGuid",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingByListingGuidResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listingGuid",
            "description": "The Listing Guid from Dash.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier of the Mls Source.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/dash/listing/{listingGuid}/source/{sourceSystemKey}": {
      "get": {
        "summary": "Get Listings for a given Listing Guid (Dash specific unique id for a listing). This API may return multiple listings for a listing id if there are multiple mls sources associated.\nUse \"source\" in the request path to narrow the result to particular mls source.",
        "operationId": "MlsListingService_GetMlsListingByListingGuid2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingByListingGuidResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listingGuid",
            "description": "The Listing Guid from Dash.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier of the Mls Source.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/dash/staff/{companyStaffGuid}": {
      "get": {
        "summary": "Get Listings for a given Company Staff Guid. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByCompanyStaffGuid",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByCompanyStaffGuidResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyStaffGuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/listing/{listingId}": {
      "get": {
        "summary": "Get Listings for a given Listing Id. This API may return more than one listing for a listing id if the listing is associated to more than one mls source.\nUse \"source\" in the request path to narrow the result to particular mls source.\nListingId's with hyphen(-) should be converted to underscore (_) internally by the pipeline. Lookup by listing id with hyphen is supported but the response should contain listing id with underscore.\nFor Ex: Both, /mls/listing/RX-10634525 and /mls/listing/RX_10634525 returns same listing. Listing id in the response is going to be \"RX_10634525\"\nAdditionally, Lookup by listing id with hyphen is supported and the response contain listing id with hyphen.",
        "operationId": "MlsListingService_GetMlsListingByListingId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingByListingIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listingId",
            "description": "The Listing ID is intended to be the identifier used to retrieve the information about a specific listing.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier from the Source System.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "postalCode",
            "description": "The postal code associated to a listing.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/listing/{listingId}/source/{sourceSystemKey}": {
      "get": {
        "summary": "Get Listings for a given Listing Id. This API may return more than one listing for a listing id if the listing is associated to more than one mls source.\nUse \"source\" in the request path to narrow the result to particular mls source.\nListingId's with hyphen(-) should be converted to underscore (_) internally by the pipeline. Lookup by listing id with hyphen is supported but the response should contain listing id with underscore.\nFor Ex: Both, /mls/listing/RX-10634525 and /mls/listing/RX_10634525 returns same listing. Listing id in the response is going to be \"RX_10634525\"\nAdditionally, Lookup by listing id with hyphen is supported and the response contain listing id with hyphen.",
        "operationId": "MlsListingService_GetMlsListingByListingId2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingByListingIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listingId",
            "description": "The Listing ID is intended to be the identifier used to retrieve the information about a specific listing.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier from the Source System.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "postalCode",
            "description": "The postal code associated to a listing.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      },
      "put": {
        "summary": "Update Listings for a given Listing Id. This API may update listing for a listing id if the listing is associated to more than one mls source.\nUse \"source\" in the request path to narrow the result to particular mls source.",
        "operationId": "MlsListingService_UpdateMlsListingByListingId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateMlsListingByListingIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listingId",
            "description": "The Listing ID is intended to be the identifier used to retrieve the information about a specific listing.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier from the Source System.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "property": {
                  "$ref": "#/definitions/v1UpdateProperty",
                  "description": "The fields and groups contained within the Property Group."
                },
                "media": {
                  "$ref": "#/definitions/v1Media",
                  "description": "The Media type is a representation of media, such as photos, virtual tours, documents/supplements, etc."
                },
                "openHouse": {
                  "$ref": "#/definitions/v1OpenHouse",
                  "description": "The OpenHouse type is a collection of fields commonly used to record an open house event."
                }
              },
              "description": "Request for listings by listing id."
            }
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/listings/realogy": {
      "get": {
        "summary": "Realogy listings endpoint can be used to lookup listings using various attributes. Use \"offset \u0026 limit\" to paginate result.\nlastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. \nDefault offset is 0 and default limit is 20 listings. Maximum limit in a request is 250.",
        "operationId": "MlsListingService_GetRealogyListings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RealogyListingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listingId",
            "description": "Search by listing id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastChangeTimestamp",
            "description": "The listings last change timestamp (in UTC) can be specified to receive listings back in time. Format: 2021-09-09T00:00:00.000Z.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier from the Source System.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q.listingId",
            "description": "Search by listing id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Pagination field. The offset to fetch listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Pagination field. Maximum number of listings that needs to be returned in the response. Maximum limit is 250. API resets the limit to 250 automically if the request contains more than max.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/listings/search": {
      "get": {
        "summary": "Search listings endpoint can be used to lookup listings using various attributes. Use \"offset \u0026 limit\" to paginate result.\nlastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. \nDefault offset is 0 and defaukt limit is 20 listings. Maximum limit in a request is 250.",
        "operationId": "MlsListingService_SearchMlsListings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SearchMlsListingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listingId",
            "description": "Search by listing id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isRealogyListing",
            "description": "This field is specific to realogy listings. Boolean value that indicates this as realogy listings.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isLuxuryListing",
            "description": "This field is specific to realogy listings. Boolean value that indicates this as luxury listings.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "lastChangeTimestamp",
            "description": "The listings last change timestamp (in UTC) can be specified to receive listings back in time. Format: 2021-09-09T00:00:00.000Z.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q.listingId",
            "description": "Search by listing id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Pagination field. The offset to fetch listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Pagination field. Maximum number of listings that needs to be returned in the response. Maximum limit is 250. API resets the limit to 250 automically if the request contains more than max.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/listings/sold": {
      "get": {
        "summary": "Get Sold Listings data for the given date range(Valid Formats: 2020-01-01, 2020-01-01T01:01:01.000Z). If start and end date are not specified, the default is last 6 months from the current date.\nstartDate and endDate are optional. If the startDate exists and the endDate is not provided, the api will consider end date to be 6 months from the start date.\nOffset is the point at which the sold listings should be returned and limit is the size of the sold listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsSoldListings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsSoldListingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startDate",
            "description": "The start date should be in \"YYYY-MM-DD\" format.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "description": "The end date should be in \"YYYY-MM-DD\" format.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/office/master/{listOfficeMasterId}": {
      "get": {
        "summary": "Get Listings for a given List OfficeMaster Id.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByOfficeMasterId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByOfficeMasterIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "listOfficeMasterId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/postalcode/{postalCode}": {
      "get": {
        "summary": "Get Listings for a given Postal Code. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByPostalCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByPostalCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "postalCode",
            "description": "The postal code to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/rdm-source/{rdmSourceSystemKey}/listing/{listingId}": {
      "post": {
        "summary": "POST endpoint to allow authorized clients to create a listing. This API creates listing for a listing id if the listing associated to rdmSourceSystemKey .",
        "operationId": "MlsListingService_AddMlsListings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddListingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "rdmSourceSystemKey",
            "description": "The standardized source system name (rdm - Referential Data Management) that should be prefixed with state code followed by underscore and the existing source name. Ex: ML (Colorado) should be CO_ML.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "listingId",
            "description": "The Listing ID is intended to be the identifier used to retrieve the information about a specific listing.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "property": {
                  "$ref": "#/definitions/v1PropertyInput",
                  "description": "The property type has fields commonly used in a Multiple Listing Service listing."
                }
              },
              "description": "Request for listings by listing id."
            }
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/source/{sourceSystemKey}": {
      "get": {
        "summary": "Get Listings for a given mls source name. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nlastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp. Deltas can be fetched upto last 30 days. \nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingBySource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsBySourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier from the Source System.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "listingAgentGuid",
            "description": "Listing agent guid from dash.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastChangeTimestamp",
            "description": "The listings last change timestamp (in UTC) can be specified to receive listings back in time. Format: 2020-03-01T00:00:00.000Z.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "listAgentMasterId",
            "description": "Listing agent master id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "listOfficeMasterId",
            "description": "Listing office master id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyMasterId",
            "description": "Company master id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/source/{sourceSystemKey}/dash/agent/{listingAgentGuid}": {
      "get": {
        "summary": "Get Listings for a given mls source name. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nlastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp. Deltas can be fetched upto last 30 days. \nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingBySource2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsBySourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier from the Source System.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "listingAgentGuid",
            "description": "Listing agent guid from dash.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "lastChangeTimestamp",
            "description": "The listings last change timestamp (in UTC) can be specified to receive listings back in time. Format: 2020-03-01T00:00:00.000Z.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "listAgentMasterId",
            "description": "Listing agent master id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "listOfficeMasterId",
            "description": "Listing office master id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyMasterId",
            "description": "Company master id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/staff/{companyStaffMasterId}": {
      "get": {
        "summary": "Get Listings for a given Company Staff Id. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByCompanyStaffId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByCompanyStaffIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyStaffMasterId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/state/{state}": {
      "get": {
        "summary": "Get Listings for a given State. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsByState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsByStateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "state",
            "description": "The state to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/stream/city/{city}": {
      "get": {
        "summary": "Stream Listings for a given City and State. This api is a streaming variation of listings by city and state.\nUse http2 to stream the response. Default idle timeout is 120 seconds.",
        "operationId": "MlsListingService_StreamMlsListingByCity",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1MlsListing"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1MlsListing"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "city",
            "description": "The city to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to search mls.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/stream/city/{city}/state/{state}": {
      "get": {
        "summary": "Stream Listings for a given City and State. This api is a streaming variation of listings by city and state.\nUse http2 to stream the response. Default idle timeout is 120 seconds.",
        "operationId": "MlsListingService_StreamMlsListingByCity2",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1MlsListing"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1MlsListing"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "city",
            "description": "The city to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/stream/postalcode/{postalCode}": {
      "get": {
        "summary": "Stream Listings for a given Postal Code. This api is a streaming variation of listings by postal code.\nUse http2 to stream the response. Default idle timeout is 120 seconds.",
        "operationId": "MlsListingService_StreamMlsListingByPostalCode",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1MlsListing"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1MlsListing"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "postalCode",
            "description": "The postal code to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/stream/source/{sourceSystemKey}": {
      "get": {
        "summary": "Stream Listings for a given mls source name. This api is a streaming variation of listings by source.\nUse http2 to stream the response. Default idle timeout is 120 seconds.",
        "operationId": "MlsListingService_StreamMlsListingBySource",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1MlsListing"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1MlsListing"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceSystemKey",
            "description": "The unique identifier from the Source System.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "listingAgentGuid",
            "description": "Listing agent guid from dash.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastChangeTimestamp",
            "description": "The listings last change timestamp (in UTC) can be specified to receive listings back in time. Format: 2020-03-01T00:00:00.000Z.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "listAgentMasterId",
            "description": "Listing agent master id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "listOfficeMasterId",
            "description": "Listing office master id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyMasterId",
            "description": "Company master id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/stream/state/{state}": {
      "get": {
        "summary": "Stream Listings for a given State.  This api is a streaming variation of listings by state.\nUse http2 to stream the response. Default idle timeout is 120 seconds.",
        "operationId": "MlsListingService_StreamMlsListingByState",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1MlsListing"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1MlsListing"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "state",
            "description": "The state to search mls.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.propertyType",
            "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.standardStatus",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.architectureStyle",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.listPriceMin",
            "description": "The minimum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.listPriceMax",
            "description": "The maximum current price of the property as determined by the seller and the seller's broker.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.bedroomsMin",
            "description": "The mimumum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.bathroomsMin",
            "description": "The maximum total number of bedrooms in the dwelling.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.buildingAreaTotalMin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.buildingAreaTotalMax",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "filter.lotSizeSquareFeetMin",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.lotSizeSquareFeetMax",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.storiesTotal",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.listAgentMlsId",
            "description": "The id for an agent as given in the original mls sources or system.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.rdmSourceSystemKey",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.postalCode",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    },
    "/mls/subdivision/{subdivisionName}": {
      "get": {
        "summary": "Get Listings for a given Subdivision. By default this api returns maximum of 20 listings. Use \"offset \u0026 limit\" in the request as query parameter to return more listings.\nOffset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.",
        "operationId": "MlsListingService_GetMlsListingsBySubdivision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMlsListingsBySubdivisionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "subdivisionName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "The offset to start fetching listings.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "The limits for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "MlsListingService"
        ]
      }
    }
  },
  "definitions": {
    "mlsv1Location": {
      "type": "object",
      "properties": {
        "gis": {
          "$ref": "#/definitions/v1Gis",
          "description": "Gis Group."
        },
        "address": {
          "$ref": "#/definitions/v1Address",
          "description": "Address Group."
        },
        "area": {
          "$ref": "#/definitions/v1Area",
          "description": "Area Group."
        },
        "school": {
          "$ref": "#/definitions/v1School",
          "description": "School Group."
        }
      },
      "description": "Location."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AddListingsResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "$ref": "#/definitions/v1MlsListing",
          "description": "Listing will have entire listing details."
        }
      },
      "description": "Response for mlslistings by listing id."
    },
    "v1Address": {
      "type": "object",
      "properties": {
        "unparsedAddress": {
          "type": "string",
          "description": "The UnparsedAddress is a text representation of the address with the full civic location as a single entity. It may optionally include any of City, StateOrProvince, PostalCode and Country."
        },
        "city": {
          "type": "string",
          "description": "The city in listing address."
        },
        "countyOrParish": {
          "type": "string",
          "description": "The County, Parish or other regional authority."
        },
        "stateOrProvince": {
          "type": "string",
          "description": "Text field containing the accepted postal abbreviation for the state or province."
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code portion of a street or mailing address."
        },
        "streetDirPrefix": {
          "type": "string",
          "description": "The direction indicator that precedes the listed property's street name."
        },
        "streetDirSuffix": {
          "type": "string",
          "description": "The direction indicator that follows a listed property's street address."
        },
        "streetName": {
          "type": "string",
          "description": "The street name portion of a listed property's street address."
        },
        "streetNumber": {
          "type": "string",
          "description": "The street number portion of a listed property's street address. In some areas the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as \"1/2\" or \"-B\"."
        },
        "unitNumber": {
          "type": "string",
          "description": "Text field containing the number or portion of a larger building or complex. Unit Number should appear following the street suffix or, if it exists, the street suffix direction, in the street address. Examples are: \"APT G\", \"55\", etc."
        },
        "township": {
          "type": "string",
          "description": "A subdivision of the county."
        },
        "country": {
          "type": "string",
          "description": "The country of property's address."
        },
        "internationalRegion": {
          "type": "string"
        },
        "postalCodePlus4": {
          "type": "string"
        }
      },
      "description": "Address."
    },
    "v1AddressInput": {
      "type": "object",
      "properties": {
        "unparsedAddress": {
          "type": "string",
          "description": "The UnparsedAddress is a text representation of the address with the full civic location as a single entity. It may optionally include any of City, StateOrProvince, PostalCode and Country."
        },
        "city": {
          "type": "string",
          "description": "The city in listing address."
        },
        "countyOrParish": {
          "type": "string",
          "description": "The County, Parish or other regional authority."
        },
        "stateOrProvince": {
          "type": "string",
          "description": "Text field containing the accepted postal abbreviation for the state or province."
        },
        "country": {
          "type": "string",
          "description": "The country of property's address."
        },
        "internationalRegion": {
          "type": "string"
        }
      }
    },
    "v1AgentOffice": {
      "type": "object",
      "properties": {
        "listAgent": {
          "$ref": "#/definitions/v1ListAgent",
          "description": "The fields and groups contained within the ListAgent Group."
        },
        "listOffice": {
          "$ref": "#/definitions/v1ListOffice",
          "description": "The fields and groups contained within the ListOffice Group."
        },
        "coListAgent": {
          "$ref": "#/definitions/v1CoListAgent",
          "description": "The fields and groups contained within the CoListAgent Group."
        },
        "coListOffice": {
          "$ref": "#/definitions/v1CoListOffice",
          "description": "The fields and groups contained within the CoListOffice Group."
        },
        "buyerAgent": {
          "$ref": "#/definitions/v1BuyerAgent",
          "description": "The fields and groups contained within the BuyerAgent Group."
        },
        "buyerOffice": {
          "$ref": "#/definitions/v1BuyerOffice",
          "description": "The fields and groups contained within the BuyerOffice Group."
        },
        "coBuyerAgent": {
          "$ref": "#/definitions/v1CoBuyerAgent",
          "description": "The fields and groups contained within the CoBuyerAgent Group."
        },
        "coBuyerOffice": {
          "$ref": "#/definitions/v1CoBuyerOffice",
          "description": "The fields and groups contained within the CoBuyerOffice Group."
        },
        "idxContactInfo": {
          "type": "string",
          "title": "Contact information used for IDX purposes"
        }
      },
      "description": "AgentOffice."
    },
    "v1Area": {
      "type": "object",
      "properties": {
        "mlsAreaMajor": {
          "type": "string",
          "description": "The major marketing area name, as defined by the MLS or other non-governmental organization."
        },
        "subdivisionName": {
          "type": "string",
          "description": "A neighborhood, community, complex or builder tract."
        }
      },
      "description": "Area."
    },
    "v1Business": {
      "type": "object",
      "properties": {
        "ownershipType": {
          "type": "string"
        },
        "leaseAmountFrequency": {
          "type": "string"
        },
        "yearEstablished": {
          "type": "integer",
          "format": "int32"
        },
        "businessType": {
          "type": "string"
        }
      },
      "description": "Business."
    },
    "v1BuyerAgencyCompensation": {
      "type": "object",
      "properties": {
        "percentage": {
          "type": "number",
          "format": "double",
          "description": "The compensation in percentage."
        },
        "fee": {
          "type": "integer",
          "format": "int32",
          "description": "The compensation as fee."
        },
        "commission": {
          "type": "string",
          "description": "The compensation as commission."
        }
      },
      "description": "This group provides informations on the total commission to be paid for this sale, expressed as either a percentage or a constant currency amount."
    },
    "v1BuyerAgent": {
      "type": "object",
      "properties": {
        "buyerAgentFullname": {
          "type": "string",
          "description": "The full name of the buyer's agent. (First Middle Last)."
        },
        "buyerAgentMlsId": {
          "type": "string"
        },
        "buyerOfficePhone": {
          "type": "string"
        }
      },
      "description": "BuyerAgent."
    },
    "v1BuyerOffice": {
      "type": "object",
      "properties": {
        "buyerOfficeName": {
          "type": "string",
          "description": "The legal name of the brokerage representing the buyer."
        },
        "buyerOfficeMlsId": {
          "type": "string",
          "description": "The buyer office identifier. The value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system."
        },
        "buyerOfficePhone": {
          "type": "string"
        }
      },
      "description": "BuyerOffice."
    },
    "v1Characteristics": {
      "type": "object",
      "properties": {
        "lotSizeAcres": {
          "type": "string",
          "description": "The total Acres of the lot. This field is related to the Lot Size Area and Lot Size Units and should be in sync with the values represented in those fields."
        },
        "lotSizeDimensions": {
          "type": "string",
          "description": "The dimensions of the lot minimally represented as length and width (i.e. 250 x 180) or a measurement of all sides of the polygon representing the property lines of the property. i.e. 30 x 50 x 120 x 60 x 22."
        },
        "lotFeatures": {
          "type": "string",
          "description": "A list of features or description of the lot included in the sale/lease."
        },
        "lotSizeSquareFeet": {
          "type": "integer",
          "format": "int32",
          "description": "The total square footage of the lot. This field is related to the Lot Size Area and Lot Size Units and should be in sync with the values represented in those fields."
        },
        "poolFeatures": {
          "type": "string",
          "description": "A list of features or description of the pool included in the sale/lease."
        },
        "privatePool": {
          "type": "boolean",
          "description": "Is the property has a privately owned pool that is included in the sale/lease."
        },
        "view": {
          "type": "string",
          "description": "A view as seen from the listed property."
        },
        "laundryFeatures": {
          "type": "string",
          "description": "Add this pick list of features and locations where the laundry is located in the property being sold. i.e. Gas Dryer Hookup, In Kitchen, In Garage, etc."
        },
        "spaFeatures": {
          "type": "string",
          "description": "A list of features or description of the spa included in the sale/lease."
        },
        "communityFeatures": {
          "type": "string",
          "description": "A list of features related to, or available within, the community."
        },
        "complexName": {
          "type": "string"
        },
        "numberOfUnitsInCommunity": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of units in the building, complex or community. This is not the number of units being sold, but rather the size of the community in which the dwelling being sold is located."
        },
        "waterBodyName": {
          "type": "string",
          "description": "The name, if known, of the body of water on which the property is located. (E.g., lake name, river name, ocean name, sea name, canal name)."
        },
        "waterFrontFeatures": {
          "type": "string",
          "description": "Features of the waterfront on which the property is located."
        },
        "waterFront": {
          "type": "boolean",
          "description": "Is the property on the waterfront."
        },
        "frontageType": {
          "type": "string",
          "description": "Pick list of types of frontage. i.e. Oceanfront, Lakefront, Golf course, etc. Information about roads or road frontage should be located in the Road Frontage Type and Road Surface Type fields."
        },
        "numberOfUnitsTotal": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of units included in the income property, occupied or unoccupied."
        },
        "hideFromPreloginSearch": {
          "type": "boolean"
        },
        "seniorCommunity": {
          "type": "boolean",
          "description": "Is the community is a senior community."
        },
        "isSmartHome": {
          "type": "boolean"
        },
        "currentUse": {
          "type": "string",
          "description": "A list of the type(s) of current use of the property. The current use of the property is an important factor in understanding the overall condition of the land and determining it's appropriateness for intended use."
        },
        "possibleUse": {
          "type": "string",
          "description": "A list of the type(s) of possible or best uses of the property. Probable use gives a good indication of what the best use or potential use of the property could be. i.e. Primary, Vacation, Investment, Rental, Retirement."
        },
        "numberOfLots": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of lots on the property or included in the sale. Land properties are often sold with multiple lots. It is important to be able to describe how many lots are in the property and not in all cases do lots have separate Parcel IDs."
        },
        "numberOfPads": {
          "type": "integer",
          "format": "int32",
          "description": "The number of pads or spaces in the mobile home park."
        },
        "developmentStatus": {
          "type": "string",
          "description": "A list of the Development Status of the property. The developmental status of land is an important factor in selling, purchasing and developing of land properties."
        },
        "fencing": {
          "type": "string",
          "description": "A list of types of fencing found at the property being sold."
        },
        "roadSurfaceType": {
          "type": "string",
          "description": "Pick list of types of surface of the Road to access the property. The surface of the road(s) for access to the property is an important factor in determining value of the property and it’s appropriateness for intended use."
        },
        "roadResponsibility": {
          "type": "string",
          "description": "The person or entity responsible for road maintenance (e.g., City, County, Private)."
        },
        "miscUtilitiesDesc": {
          "type": "string"
        },
        "furnished": {
          "type": "string",
          "description": "The property being leased is furnished, unfurnished or partially furnished."
        },
        "leaseterm": {
          "type": "string",
          "description": "A pick list of lengths that represent the length of the lease. i.e. Weekly, Month to Month, 6 Month Lease, 12 Month Lease, 24 Month Lease."
        },
        "isRentersInsuranceRequired": {
          "type": "boolean"
        },
        "numberOfBuildings": {
          "type": "integer",
          "format": "int32"
        },
        "lotElevation": {
          "type": "string"
        },
        "lotSizeSource": {
          "type": "string"
        },
        "parkName": {
          "type": "string"
        },
        "frontageLength": {
          "type": "string"
        },
        "greenFeatures": {
          "$ref": "#/definitions/v1GreenFeatures"
        }
      },
      "description": "Characteristics."
    },
    "v1Closing": {
      "type": "object",
      "properties": {
        "availabilityDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the property will be available for possession/occupation."
        }
      },
      "description": "Closing."
    },
    "v1CoBuyerAgent": {
      "type": "object",
      "properties": {
        "coBuyerAgentFullname": {
          "type": "string",
          "description": "The full name of the buyer's co-agent. (First Middle Last)."
        },
        "coBuyerAgentMlsId": {
          "type": "string"
        }
      },
      "description": "CoBuyerAgent."
    },
    "v1CoBuyerOffice": {
      "type": "object",
      "properties": {
        "coBuyerOfficeName": {
          "type": "string",
          "description": "The legal name of the brokerage co-representing the buyer."
        },
        "coBuyerOfficeMlsId": {
          "type": "string"
        },
        "coBuyerOfficePhone": {
          "type": "string"
        }
      },
      "description": "CoBuyerOffice."
    },
    "v1CoListAgent": {
      "type": "object",
      "properties": {
        "coListAgentFullName": {
          "type": "string",
          "description": "The full name of the co-listing agent. (First Middle Last)."
        },
        "coListAgentMlsId": {
          "type": "string",
          "description": "The co-list agent identifier. The value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system."
        },
        "coListAgentOfficePhone": {
          "type": "string"
        }
      },
      "description": "CoListAgent."
    },
    "v1CoListOffice": {
      "type": "object",
      "properties": {
        "coListOfficeName": {
          "type": "string",
          "description": "The legal name of the brokerage co-representing the seller."
        },
        "coListOfficeMlsId": {
          "type": "string",
          "description": "The co-list office identifier. The value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system."
        },
        "coListOfficePhone": {
          "type": "string"
        }
      },
      "description": "CoListOffice."
    },
    "v1Compensation": {
      "type": "object",
      "properties": {
        "listAgencyCompensation": {
          "$ref": "#/definitions/v1ListAgencyCompensation"
        },
        "buyerAgencyCompensation": {
          "$ref": "#/definitions/v1BuyerAgencyCompensation",
          "description": "The total commission to be paid for this sale, expressed as either a percentage or a constant currency amount."
        }
      },
      "description": "Compensation."
    },
    "v1Contract": {
      "type": "object",
      "properties": {
        "currentFinancing": {
          "type": "string",
          "description": "The type of financing that the seller currently has in place for the property being sold. i.e. cash, assumable, FHA loan, etc."
        },
        "specialListingConditions": {
          "$ref": "#/definitions/v1SpecialListingConditions",
          "description": "The type of sale. i.e. Standard, REO, Short Sale, Probate, Auction, NOD, etc., at the time of listing."
        },
        "isHudOwnedDates": {
          "type": "boolean"
        }
      },
      "description": "Contract."
    },
    "v1Dash": {
      "type": "object",
      "properties": {
        "listingGuid": {
          "type": "string",
          "description": "The id of a listing."
        },
        "sourceSystemKey": {
          "type": "string",
          "description": "The id of a mls source."
        },
        "listingAgentGuid": {
          "type": "string",
          "description": "The unique id of an listing agent."
        },
        "companyStaffGuid": {
          "type": "string",
          "description": "The unique id of a company staff."
        },
        "termDays": {
          "type": "integer",
          "format": "int32",
          "title": "number of days between list date and expire date"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Features"
          },
          "description": "A list of features."
        },
        "websites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Websites"
          },
          "description": "Websites Information."
        }
      },
      "description": "Dash listings (internal listings)."
    },
    "v1Dates": {
      "type": "object",
      "properties": {
        "listingContractDate": {
          "type": "string",
          "format": "date-time",
          "description": "The effective date of the agreement between the seller and the seller's broker. This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS."
        },
        "firstAppearedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the listing first entered in the internal system."
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the listing agreement will expire. This is the date entered by the agent reflecting when the change occurred, or will occur, contractually, not a timestamp of when the change was made in the MLS. The expiration date of listings, prior to their expiration, cancellation, sale or lease, is confidential information and should be restricted to the agent and their managers, partners or broker."
        },
        "lastChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "The last updated date for a listing in the internal system."
        },
        "statusChangeDate": {
          "type": "string",
          "format": "date-time"
        },
        "insertedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The inserted date for a listing in the internal system."
        },
        "yearConverted": {
          "type": "integer",
          "format": "int32",
          "description": "This is a place holder field for now to capture any major conversion done on a property like converting a garage to a room or it could even mean converting LAND to Residential Home, etc."
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "description": "Age of the property, another place holder field which is usually derived from year_built field."
        },
        "originalEntryTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The transactional timestamp automatically recorded by the MLS system representing the date/time the listing was entered and made visible to members of the MLS."
        },
        "closeDate": {
          "type": "string",
          "format": "date-time",
          "description": "With for-sale listings, the date the purchase agreement was fulfilled. With lease listings, the date the requirements were fulfilled, such as contract and/or deposit. This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS."
        },
        "cancellationDate": {
          "type": "string",
          "format": "date-time"
        },
        "pendingTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The transactional timestamp automatically recorded by the MLS system representing the most recent date/time the listing's status was set to Pending."
        },
        "onMarketDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the listing was placed on market. Where possible, this date is reflective of the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS."
        },
        "contingentDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date an offer was made with a contingency. The Listing remains On Market. This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS."
        },
        "offMarketDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the listing was taken off market. Where possible, this date is reflective of the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS."
        },
        "cumulativeDaysOnMarket": {
          "type": "integer",
          "format": "int32",
          "description": "The number of days the property is on market which includes both active and inactive status, as defined by the MLS business rules."
        },
        "modificationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "mlsModificationTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "Dates. This has aggregation of various dates associated with a listing."
    },
    "v1DatesInput": {
      "type": "object",
      "properties": {
        "closeDate": {
          "type": "string",
          "format": "date-time",
          "description": "With for-sale listings, the date the purchase agreement was fulfilled. With lease listings, the date the requirements were fulfilled, such as contract and/or deposit. This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS."
        }
      }
    },
    "v1Equipment": {
      "type": "object",
      "properties": {
        "otherEquipment": {
          "type": "string",
          "description": "A list of other equipment that will be included in the sale of the property."
        },
        "appliances": {
          "type": "string",
          "description": "A list of the appliances that will be included in the sale/lease of the property."
        },
        "securityFeatures": {
          "type": "string",
          "description": "A list describing the security features included in the sale/lease."
        },
        "includes": {
          "type": "string",
          "description": "A list of existing appliances that the sellers include in the sale.."
        },
        "excludes": {
          "type": "string",
          "description": "A list of existing appliances that the sellers exclude in the sale.."
        },
        "greenFeatures": {
          "$ref": "#/definitions/v1GreenFeatures"
        }
      },
      "description": "Equipment."
    },
    "v1Features": {
      "type": "object",
      "properties": {
        "featureCode": {
          "type": "string",
          "title": "listing/property feature code"
        },
        "featureDescription": {
          "type": "string",
          "title": "listing/property feature description"
        },
        "featureGroupCode": {
          "type": "string",
          "title": "listing/property feature group code"
        },
        "featureGroupDescription": {
          "type": "string",
          "title": "listing/property feature group description"
        }
      },
      "title": "Dash Listing Features"
    },
    "v1Financial": {
      "type": "object",
      "properties": {
        "rentIncludes": {
          "type": "string",
          "description": "A list of services or items that the tenant is not responsible to pay."
        },
        "salesIncludes": {
          "type": "string"
        },
        "electricExpense": {
          "type": "number",
          "format": "double",
          "description": "The annual expense that is not paid directly by the tenant and is included in the Operating Expense calculations."
        },
        "tenantPays": {
          "type": "string",
          "description": "A list of services or items that the tenant is responsible to pay."
        },
        "ownerPays": {
          "type": "string",
          "description": "A list of expenses for the property paid for by the owner as opposed to the tenant (e.g. Water, Trash, Electric)."
        },
        "incomeIncludes": {
          "type": "string",
          "description": "A list of income sources included in the GrossScheduledIncome and GrossIncome. i.e. Laundry, Parking, Recreation, Storage, etc."
        },
        "isRentControl": {
          "type": "boolean",
          "description": "Is the property in a rent control area."
        },
        "totalActualRent": {
          "type": "number",
          "format": "double",
          "description": "Total actual rent currently being collected from tenants of the income property."
        }
      },
      "description": "Financial."
    },
    "v1GetMlsListingByListingGuidResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          },
          "description": "A list of listings."
        }
      },
      "description": "Response for listings by listing guid."
    },
    "v1GetMlsListingByListingIdResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          },
          "description": "A list of listings."
        }
      },
      "description": "Response for listings by listing id."
    },
    "v1GetMlsListingsByAddressResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by unparsed address."
    },
    "v1GetMlsListingsByAgentGuidResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by agent guid."
    },
    "v1GetMlsListingsByAgentIdResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by agent id."
    },
    "v1GetMlsListingsByAgentMasterIdResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by ListAgentMasterId."
    },
    "v1GetMlsListingsByCityResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by city."
    },
    "v1GetMlsListingsByCompanyMasterIdResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by CompanyAgentMasterId."
    },
    "v1GetMlsListingsByCompanyStaffGuidResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by CompanyStaffId."
    },
    "v1GetMlsListingsByCompanyStaffIdResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by CompanyStaffId."
    },
    "v1GetMlsListingsByOfficeMasterIdResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by ListOfficeMasterId."
    },
    "v1GetMlsListingsByPostalCodeResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by postal code."
    },
    "v1GetMlsListingsBySourceResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          },
          "description": "A list of listings."
        }
      },
      "description": "Response for listings by source system key (MLS Source)."
    },
    "v1GetMlsListingsByStateResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by state."
    },
    "v1GetMlsListingsBySubdivisionResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          }
        }
      },
      "description": "Response for listings by Subdivision."
    },
    "v1GetMlsSoldListingsResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          },
          "description": "A list of listings."
        }
      },
      "description": "Response for sold listings."
    },
    "v1Gis": {
      "type": "object",
      "properties": {
        "crossStreet": {
          "type": "string",
          "description": "Nearest cross streets to the property. This field is in addition to, and independent of, the driving directions field."
        },
        "mapCoordinate": {
          "type": "string",
          "description": "A map coordinate for the property. This is not necessarily the same as the geographic coordinate but may depend on the coordinate system used by the listing service."
        },
        "directions": {
          "type": "string",
          "description": "Driving directions to the property."
        },
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        },
        "mlsLatitude": {
          "type": "number",
          "format": "double",
          "description": "The geographic latitude of some reference point on the property, specified in degrees and decimal parts. Positive numbers must not include the plus symbol."
        },
        "mlsLongitude": {
          "type": "number",
          "format": "double",
          "description": "The geographic longitude of some reference point on the property, specified in degrees and decimal parts. Positive numbers must not include the plus symbol."
        },
        "parcelLatitude": {
          "type": "number",
          "format": "double"
        },
        "parcelLongitude": {
          "type": "number",
          "format": "double"
        },
        "geocodedCity": {
          "type": "string"
        },
        "neighborhoodId": {
          "type": "string"
        },
        "neighborhood": {
          "type": "string"
        }
      },
      "description": "GIS."
    },
    "v1GreenFeatures": {
      "type": "object",
      "properties": {
        "energyEfficient": {
          "type": "string"
        },
        "energyGeneration": {
          "type": "string"
        },
        "indoorAirQuality": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "sustainability": {
          "type": "string"
        },
        "waterConservation": {
          "type": "string"
        }
      }
    },
    "v1HealthResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Response for health check."
    },
    "v1Hoa": {
      "type": "object",
      "properties": {
        "associationFee": {
          "type": "number",
          "format": "double",
          "description": "A fee paid by the homeowner to the Home Owners Association which is used for the upkeep of the common area, neighborhood or other association related benefits."
        },
        "associationFeeFrequency": {
          "type": "string",
          "description": "The frequency the association fee is paid. For example, Weekly, Monthly, Annually, Bi-Monthly, One Time, etc."
        },
        "associationFee2": {
          "type": "integer",
          "format": "int32",
          "description": "A fee paid by the homeowner to the second of two Home Owners Associations, which is used for the upkeep of the common area, neighborhood or other association related benefits."
        },
        "associationFee2Frequency": {
          "type": "string",
          "description": "The frequency the association fee is paid. For example, Weekly, Monthly, Annually, Bi-Monthly, One Time, etc."
        },
        "associationAmenities": {
          "type": "string",
          "description": "Amenities provided by the Home Owners Association, Mobile Park or Complex. For example Pool, Clubhouse, etc."
        },
        "associationFeeIncludes": {
          "type": "string",
          "description": "Services included with the association fee. For example Landscaping, Trash, Water, etc."
        },
        "petsAllowed": {
          "type": "string",
          "description": "Are pets allowed at the property being leased? A list of yes, no and more detailed restrictions/allowances."
        },
        "associationName": {
          "type": "string",
          "description": "The name of the Home Owners Association."
        }
      },
      "description": "HOA."
    },
    "v1Internal": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string",
          "description": "Derived city for backward compatibility with legacy systems."
        },
        "location": {
          "$ref": "#/definitions/mlsv1Location",
          "title": "normalized address from the address api"
        }
      },
      "description": "Internal. For legacy ZAP which might be deprecated in the future."
    },
    "v1InternationalRemarks": {
      "type": "object",
      "properties": {
        "languageName": {
          "type": "string",
          "title": "Remarks Language"
        },
        "remarkType": {
          "type": "string",
          "title": "Remarks Type"
        },
        "htmlRemark": {
          "type": "string",
          "title": "Remarks in HTML format"
        }
      },
      "title": "International Remarks"
    },
    "v1ListAgencyCompensation": {
      "type": "object",
      "properties": {
        "percentage": {
          "type": "number",
          "format": "double",
          "description": "The compensation in percentage."
        },
        "fee": {
          "type": "integer",
          "format": "int32",
          "description": "The compensation as fee."
        },
        "commission": {
          "type": "string",
          "description": "The compensation as commission."
        }
      },
      "description": "ListAgencyCompensation."
    },
    "v1ListAgent": {
      "type": "object",
      "properties": {
        "listAgentFullname": {
          "type": "string",
          "description": "The full name of the listing agent. (First Middle Last)."
        },
        "listAgentMlsId": {
          "type": "string",
          "description": "The identifier for the member. The value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system."
        },
        "listAgentOfficePhone": {
          "type": "string",
          "description": "North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol."
        },
        "listAgentOfficePhoneType": {
          "type": "string"
        },
        "listAgentStateLicense": {
          "type": "string",
          "description": "The license of the listing agent. Separate multiple licenses with a comma and space."
        },
        "listAgentStateLicenseState": {
          "type": "string"
        },
        "listAgentEmail": {
          "type": "string"
        },
        "listAgentActive": {
          "type": "boolean"
        },
        "listAgentAddress": {
          "type": "string"
        },
        "listAgentCity": {
          "type": "string"
        },
        "listAgentStateOrProvince": {
          "type": "string"
        },
        "listAgentPostalCode": {
          "type": "string"
        },
        "listAgentType": {
          "type": "string"
        },
        "listAgentOriginalEntryTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "listAgentModificationTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "listAgentPhone": {
          "type": "string"
        },
        "attributionContact": {
          "type": "string"
        }
      },
      "description": "ListAgent."
    },
    "v1ListOffice": {
      "type": "object",
      "properties": {
        "listOfficeName": {
          "type": "string",
          "description": "The legal name of the brokerage representing the seller."
        },
        "listOfficePhone": {
          "type": "string",
          "description": "The North American 10 digit phone numbers should be in the format of ###-###-#### (separated by hyphens). Other conventions should use the common local standard. International numbers should be preceded by a plus symbol."
        },
        "listOfficeMlsId": {
          "type": "string",
          "description": "The list office identifier. The value may not be unique, specifically in the case of aggregation systems, this value should be the identifier from the original system."
        },
        "listOfficeAddress": {
          "type": "string"
        },
        "listOfficeCity": {
          "type": "string"
        },
        "listOfficeStateOrProvince": {
          "type": "string"
        },
        "listOfficePostalCode": {
          "type": "string"
        },
        "listOfficeEmail": {
          "type": "string"
        },
        "listOfficeFax": {
          "type": "string"
        },
        "listOfficeOriginalEntryTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "listOfficeModificationTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "ListOffice."
    },
    "v1Listing": {
      "type": "object",
      "properties": {
        "listingId": {
          "type": "string",
          "description": "The Listing ID is intended to be the identifier used to retrieve the information about a specific listing. In a multiple originating system or a merged system, this value may not be unique and may require the use of the provider system to create a synthetic unique value.\nListingId's with hyphen(-) should be converted to underscore (_) internally by the pipeline."
        },
        "sourceSystemKey": {
          "type": "string",
          "description": "The unique identifier from the Source System, This is the unique internal name we use for a given MLS. Can be identified using the MLS Display Rules API."
        },
        "sourceSystemName": {
          "type": "string",
          "description": "The legal name of the company from which the record was directly received."
        },
        "standardStatus": {
          "type": "string",
          "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN)."
        },
        "buildingPermits": {
          "type": "string",
          "description": "Commercial data."
        },
        "documentsAvailable": {
          "type": "string",
          "description": "A list of the Documents available for the property. Knowing what documents are available for the property is valuable information."
        },
        "disclosures": {
          "type": "string",
          "description": "Commercial data."
        },
        "contract": {
          "$ref": "#/definitions/v1Contract",
          "description": "The fields and groups contained within the Contract Group."
        },
        "price": {
          "$ref": "#/definitions/v1Price",
          "description": "The fields and groups contained within the Price Group."
        },
        "agentOffice": {
          "$ref": "#/definitions/v1AgentOffice",
          "description": "The fields and groups contained within the BuyerAgent Group."
        },
        "compensation": {
          "$ref": "#/definitions/v1Compensation",
          "description": "The fields and groups contained within the Compensation Group."
        },
        "dates": {
          "$ref": "#/definitions/v1Dates",
          "description": "The fields and groups contained within the Dates Group."
        },
        "remarks": {
          "$ref": "#/definitions/v1Remarks",
          "description": "The fields and groups contained within the Remarks Group."
        },
        "marketing": {
          "$ref": "#/definitions/v1Marketing",
          "description": "The fields and groups contained within the Marketing Group."
        },
        "closing": {
          "$ref": "#/definitions/v1Closing"
        },
        "homeWarranty": {
          "type": "boolean"
        },
        "mlsStatus": {
          "type": "string",
          "description": "The raw status value from the MLS."
        },
        "pendingOffer": {
          "type": "boolean",
          "description": "The value is derived based on the MLS raw status."
        },
        "daysOnMarket": {
          "type": "integer",
          "format": "int32",
          "title": "The number of days the property is on market in active status"
        },
        "rdmSourceSystemKey": {
          "type": "string",
          "description": "The standardized source system name (rdm - Referential Data Management) that should be prefixed with state code followed by underscore and the existing source name. Ex: ML (Colorado) should be CO_ML."
        },
        "isComingSoon": {
          "type": "boolean",
          "description": "Indicates that this listing has not yet been on market but will be on market soon. A listing contract has been executed. Coming Soon is different from Hold and Withdrawn as the property, under the current listing contract only, has not been previously on market."
        },
        "mlsListingId": {
          "type": "string",
          "description": "Original listing number or listing id in MLS source system."
        },
        "listingTerms": {
          "type": "string"
        }
      },
      "description": "Listing."
    },
    "v1ListingInput": {
      "type": "object",
      "properties": {
        "listingId": {
          "type": "string",
          "description": "The Listing ID is intended to be the identifier used to retrieve the information about a specific listing."
        },
        "standardStatus": {
          "type": "string",
          "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN)."
        },
        "dates": {
          "$ref": "#/definitions/v1DatesInput",
          "description": "The fields and groups contained within the Dates Group."
        },
        "price": {
          "$ref": "#/definitions/v1PriceInput",
          "description": "The fields and groups contained within the Price Group."
        },
        "sourceSystemKey": {
          "type": "string",
          "description": "The unique identifier of the Mls Source."
        }
      }
    },
    "v1LiveStreamOpenHomes": {
      "type": "object",
      "properties": {
        "hashCode": {
          "type": "string",
          "description": "Hash code."
        },
        "openHouseDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the live stream open house."
        },
        "openHouseStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start date and time of the live stream open house."
        },
        "openHouseEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end date and time of the live stream open house."
        },
        "url": {
          "type": "string",
          "description": "The url for the live stream open house."
        },
        "comments": {
          "type": "string",
          "description": "Comments for the live stream open house."
        }
      },
      "description": "LiveStreamOpenHomes."
    },
    "v1LiveStreamOpenHouse": {
      "type": "object",
      "properties": {
        "isLiveStreamOh": {
          "type": "boolean",
          "description": "Is there a live stream open house."
        },
        "liveStreamOpenHomes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1LiveStreamOpenHomes"
          },
          "description": "List of live stream open homes."
        }
      },
      "description": "LiveStreamOpenHouse."
    },
    "v1LocationInput": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/v1AddressInput",
          "title": "Address of the Location represented by AddressInput"
        }
      }
    },
    "v1Marketing": {
      "type": "object",
      "properties": {
        "virtualTourUrlUnbranded": {
          "type": "string"
        },
        "internetAutomatedValuationDisplay": {
          "type": "boolean"
        },
        "internetConsumerComment": {
          "type": "boolean"
        },
        "internetEntireListingDisplay": {
          "type": "boolean"
        },
        "internetAddressDisplay": {
          "type": "boolean"
        },
        "websiteDetailPageUrl": {
          "type": "string",
          "description": "Static SEO URL using Address Id. (Internal)."
        },
        "isIdxParticipation": {
          "type": "boolean",
          "description": "IDX participation consent flag. \"true\" indicates that this listing can be used for IDX purposes. \"false\" indicates that this listing cannot be displayed in internet."
        },
        "displayOptions": {
          "type": "string"
        },
        "showingOptions": {
          "type": "string"
        }
      },
      "description": "Marketing."
    },
    "v1MasterId": {
      "type": "object",
      "properties": {
        "listingMasterId": {
          "type": "string",
          "description": "Listing master id."
        },
        "propertyMasterId": {
          "type": "string",
          "description": "Property master id."
        },
        "listAgentMasterId": {
          "type": "string",
          "description": "Listing agent master id."
        },
        "listOfficeMasterId": {
          "type": "string",
          "description": "Listing office master id."
        },
        "coListAgentMasterId": {
          "type": "string",
          "description": "Co-listing agent master id."
        },
        "coListOfficeMasterId": {
          "type": "string",
          "description": "Co-listing office master id."
        },
        "buyerAgentMasterId": {
          "type": "string",
          "description": "Buyer agent master id."
        },
        "buyerOfficeMasterId": {
          "type": "string",
          "description": "Buyer office master id."
        },
        "coBuyerAgentMasterId": {
          "type": "string",
          "description": "Co-buyer agent master id."
        },
        "coBuyerOfficeMasterId": {
          "type": "string",
          "description": "Co-buyer office master id."
        },
        "addressMasterId": {
          "type": "string",
          "description": "Address master id."
        },
        "companyMasterId": {
          "type": "string",
          "description": "Company master id."
        },
        "teamMasterId": {
          "type": "string",
          "description": "Team master id."
        }
      },
      "title": "MasterId. Unique id internally generated for a listing such as listing agent, listing office, address etc.,"
    },
    "v1Media": {
      "type": "object",
      "properties": {
        "numImages": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of photos downloaded and processed."
        },
        "modificationTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Photos last modified time by MLS source system."
        },
        "imageHashCode": {
          "type": "string",
          "description": "(Internal)."
        },
        "uuid": {
          "type": "string"
        },
        "lastChangeTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Photos last modified time by internal system. This is the actual time that the photos are downloaded by the internal system."
        },
        "mediaInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MediaInfo"
          },
          "description": "A list of media information."
        }
      },
      "description": "This group is a representation of media, such as photos, virtual tours, documents/supplements, etc."
    },
    "v1MediaInfo": {
      "type": "object",
      "properties": {
        "indexNum": {
          "type": "integer",
          "format": "int32"
        },
        "mediaUrl": {
          "type": "string",
          "description": "The URI to the media file referenced by this record."
        },
        "photosChangeTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "imageHeight": {
          "type": "integer",
          "format": "int32",
          "description": "(Internal)."
        },
        "imageWidth": {
          "type": "integer",
          "format": "int32",
          "description": "(Internal)."
        },
        "md5": {
          "type": "string",
          "description": "(Internal)."
        }
      },
      "title": "Informations on media such as photos url, dimensions etc.,"
    },
    "v1MlsChange": {
      "type": "object",
      "properties": {
        "marker": {
          "type": "string",
          "description": "Unique id for an mls change events."
        },
        "changeType": {
          "type": "string",
          "description": "Change type such as \"insert, replace or delete\"."
        },
        "changeTime": {
          "type": "string",
          "format": "date-time",
          "description": "Mls listings change time."
        }
      },
      "description": "Meta data about the listing changes or events."
    },
    "v1MlsFilter": {
      "type": "object",
      "properties": {
        "propertyType": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN."
        },
        "standardStatus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer (ACTIVE, INACTIVE, SOLD, CANCELED, HOLD, UNKNOWN, EXPIRED, TEMP, TERMINATED, PENDING, WITHDRAWN)."
        },
        "architectureStyle": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "listPriceMin": {
          "type": "number",
          "format": "double",
          "description": "The minimum current price of the property as determined by the seller and the seller's broker."
        },
        "listPriceMax": {
          "type": "number",
          "format": "double",
          "description": "The maximum current price of the property as determined by the seller and the seller's broker."
        },
        "bedroomsMin": {
          "type": "integer",
          "format": "int32",
          "description": "The mimumum total number of bedrooms in the dwelling."
        },
        "bathroomsMin": {
          "type": "integer",
          "format": "int32",
          "description": "The maximum total number of bedrooms in the dwelling."
        },
        "buildingAreaTotalMin": {
          "type": "number",
          "format": "double"
        },
        "buildingAreaTotalMax": {
          "type": "number",
          "format": "double"
        },
        "lotSizeSquareFeetMin": {
          "type": "integer",
          "format": "int32"
        },
        "lotSizeSquareFeetMax": {
          "type": "integer",
          "format": "int32"
        },
        "storiesTotal": {
          "type": "integer",
          "format": "int32"
        },
        "listAgentMlsId": {
          "type": "string",
          "description": "The id for an agent as given in the original mls sources or system."
        },
        "rdmSourceSystemKey": {
          "type": "string"
        },
        "postalCode": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Filters for listings."
    },
    "v1MlsListing": {
      "type": "object",
      "properties": {
        "property": {
          "$ref": "#/definitions/v1Property",
          "description": "The property type has fields commonly used in a Multiple Listing Service listing."
        },
        "media": {
          "$ref": "#/definitions/v1Media",
          "description": "The Media type is a representation of media, such as photos, virtual tours, documents/supplements, etc."
        },
        "openHouse": {
          "$ref": "#/definitions/v1OpenHouse",
          "description": "The OpenHouse type is a collection of fields commonly used to record an open house event."
        },
        "dash": {
          "$ref": "#/definitions/v1Dash",
          "description": "Listings data related to Dash system."
        },
        "masterId": {
          "$ref": "#/definitions/v1MasterId",
          "description": "List of master id's. Used for internal purpose."
        },
        "liveStreamOpenHouse": {
          "$ref": "#/definitions/v1LiveStreamOpenHouse",
          "description": "The live stream open house."
        },
        "internal": {
          "$ref": "#/definitions/v1Internal",
          "description": "Internal has fields enriched for internal usages."
        },
        "realogy": {
          "$ref": "#/definitions/v1Realogy",
          "description": "This has fields internal to realogy."
        },
        "isInternalSource": {
          "type": "boolean",
          "description": "The internal source flag indicates that this listing belongs to an internal business system and not an actual MLS listing. Examples : ELL, SOLO."
        }
      },
      "description": "MLSListings. This is the canonical representation of listings data which closely follows RESO standard naming conventions."
    },
    "v1OpenHomes": {
      "type": "object",
      "properties": {
        "hashCode": {
          "type": "string"
        },
        "openHouseDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which the open house will occur."
        },
        "openHouseStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date \u0026 time the open house begins."
        },
        "openHouseEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date \u0026 time the open house ends."
        },
        "originalEntryTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The transactional timestamp automatically recorded by the MLS system representing the date/time the Open House was entered and made visible to members of the MLS."
        },
        "modificationTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The transactional timestamp automatically recorded by the MLS system representing the date/time the Open House was last modified."
        },
        "openHouseRemarks": {
          "type": "string",
          "description": "Comments, instructions or information about the open house."
        },
        "isCanceled": {
          "type": "boolean",
          "description": "Is the open house canceled."
        },
        "isAppointmentNeeded": {
          "type": "boolean",
          "title": "Whether an appointment is needed or not"
        }
      },
      "description": "OpenHomes."
    },
    "v1OpenHouse": {
      "type": "object",
      "properties": {
        "isOpenHomes": {
          "type": "boolean",
          "description": "Is there a open house."
        },
        "openHomes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OpenHomes"
          },
          "description": "A list of open homes."
        }
      },
      "description": "The OpenHouse is a collection of fields commonly used to record an open house event."
    },
    "v1Price": {
      "type": "object",
      "properties": {
        "listPrice": {
          "type": "number",
          "format": "double",
          "description": "The current price of the property as determined by the seller and the seller's broker. For auctions this is the minimum or reserve price."
        },
        "listPriceHigh": {
          "type": "number",
          "format": "double",
          "description": "Higher range of the listing price if available."
        },
        "isPriceReduced": {
          "type": "boolean",
          "description": "Has the property price reduced."
        },
        "priceChangeTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the price changed."
        },
        "originalListPrice": {
          "type": "number",
          "format": "double",
          "description": "The original price of the property on the initial agreement between the seller and the seller's broker."
        },
        "closePrice": {
          "type": "number",
          "format": "double",
          "description": "The amount of money paid by the purchaser to the seller for the property under the agreement."
        },
        "petRent": {
          "type": "number",
          "format": "double"
        },
        "monthsRentUpfront": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string",
          "description": "The value of currency will be 'USD' for US based mls sources and local currency for non US based mls sources."
        },
        "pricePerSqFt": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Price."
    },
    "v1PriceInput": {
      "type": "object",
      "properties": {
        "listPrice": {
          "type": "number",
          "format": "double",
          "description": "The current price of the property as determined by the seller and the seller's broker. For auctions this is the minimum or reserve price."
        },
        "closePrice": {
          "type": "number",
          "format": "double",
          "description": "The amount of money paid by the purchaser to the seller for the property under the agreement."
        },
        "currency": {
          "type": "string",
          "description": "The value of currency will be 'USD' for US based mls sources and local currency for non US based mls sources."
        }
      }
    },
    "v1Property": {
      "type": "object",
      "properties": {
        "propertyType": {
          "type": "string",
          "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN."
        },
        "propertySubType": {
          "type": "string",
          "description": "The subtype of a property varies by MLS. Some examples are Triplex, Quadruplex, Duplex, Condo Shared Wall, Condo Freestanding, Twin Single, Industrial Land, Farm Livestock, Retail Land, Detached, Attached, Tenancy in Common, Stock Cooperative, etc."
        },
        "financial": {
          "$ref": "#/definitions/v1Financial",
          "description": "The financial data for rental and commercial property."
        },
        "listing": {
          "$ref": "#/definitions/v1Listing",
          "description": "The fields and groups contained within the BuyerAgent Group."
        },
        "tax": {
          "$ref": "#/definitions/v1Tax",
          "description": "The fields and groups contained within the Tax Group."
        },
        "hoa": {
          "$ref": "#/definitions/v1Hoa",
          "description": "The fields and groups contained within the Hoa Group."
        },
        "location": {
          "$ref": "#/definitions/mlsv1Location",
          "description": "The fields and groups contained within the Address Group."
        },
        "structure": {
          "$ref": "#/definitions/v1Structure",
          "description": "The fields and groups contained within the GreenMarketing Group."
        },
        "characteristics": {
          "$ref": "#/definitions/v1Characteristics",
          "description": "The fields and groups contained within the Characteristics Group."
        },
        "utilities": {
          "$ref": "#/definitions/v1Utilities",
          "description": "The fields and groups contained within the Utilities Group."
        },
        "equipment": {
          "$ref": "#/definitions/v1Equipment",
          "description": "The fields and groups contained within the Equipment Group."
        },
        "business": {
          "$ref": "#/definitions/v1Business",
          "description": "The fields and groups contained within the Business Group."
        },
        "photosCount": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of photos available as per MLS."
        }
      },
      "description": "Property."
    },
    "v1PropertyCondition": {
      "type": "object",
      "properties": {
        "isFixerUpper": {
          "type": "boolean",
          "description": "The property is a \"fixer\" or property in need of moderate or extensive repair."
        },
        "isNewConstruction": {
          "type": "boolean",
          "description": "Is the property newly built."
        }
      },
      "description": "PropertyCondition."
    },
    "v1PropertyInput": {
      "type": "object",
      "properties": {
        "propertyType": {
          "type": "string",
          "description": "The type of a property such as SFR (Single Family Residence), MFR (Multi-Family Residence), MFD (Manufactured/Mobile Homes), CONDO, TOWNHOUSE, COOP, FARM, LAND, RENTAL, COMMERCIAL_SALE, COMMERCIAL_LEASE and UNKNOWN."
        },
        "listing": {
          "$ref": "#/definitions/v1ListingInput",
          "description": "The fields and groups contained within the BuyerAgent Group."
        },
        "location": {
          "$ref": "#/definitions/v1LocationInput",
          "title": "The location of a property"
        }
      }
    },
    "v1Realogy": {
      "type": "object",
      "properties": {
        "isRealogyListing": {
          "type": "boolean",
          "description": "Indicates whether this listing is a Realogy listing."
        },
        "isLuxuryListing": {
          "type": "boolean",
          "description": "Indicates whether this listing is a luxury listing based on internal algorithm."
        },
        "brandCode": {
          "type": "string",
          "title": "brand_code of the brand to which this listing belongs to"
        }
      },
      "description": "Realogy internal fields."
    },
    "v1RealogyListingsResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          },
          "description": "List of listings."
        }
      },
      "description": "Response for Realogy listings."
    },
    "v1Remarks": {
      "type": "object",
      "properties": {
        "publicRemarks": {
          "type": "string",
          "description": "Text remarks that may be displayed to the public. In an MLS, it is the field where information is entered for the public. This information is intended to be visible on-line. This is typically information that describes the selling points of the building and/or land for sale. Local conditions and rules will determine what such content can contain. Generally, the following information is excluded: any information pertaining to entry to the property, the seller and/or tenant, listing member contact information. In other systems, these remarks will be determined by local business rules."
        },
        "privateRemarks": {
          "type": "string",
          "description": "Remarks that may contain security or proprietary information and should be restricted from public view."
        },
        "miscInfo": {
          "type": "string",
          "description": "Custom info pertaining to a given MLS. Context can vary between MLS's (Internal)."
        },
        "sellingComments": {
          "type": "string",
          "description": "Selling comments from an agent (non-reso)."
        },
        "internationalRemarks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InternationalRemarks"
          },
          "description": "A list of remarks about the listing including international language remarks."
        }
      },
      "description": "Remarks."
    },
    "v1Rooms": {
      "type": "object",
      "properties": {
        "roomsTotal": {
          "type": "integer",
          "format": "int32",
          "description": "The number of rooms in the dwelling."
        },
        "kitchenDim": {
          "type": "string",
          "description": "Kitchen room dimensions."
        },
        "livingRmDim": {
          "type": "string",
          "description": "Living room dimensions."
        },
        "masterBrDim": {
          "type": "string",
          "description": "Master bedroom dimensions."
        },
        "diningRmDim": {
          "type": "string",
          "description": "Dining room dimensions."
        },
        "familyRmDim": {
          "type": "string",
          "description": "Family room dimensions."
        },
        "diningDesc": {
          "type": "string",
          "description": "Dining room description."
        },
        "familyRoomDesc": {
          "type": "string",
          "description": "Family room description."
        },
        "kitchenDesc": {
          "type": "string",
          "description": "Kitchen description."
        },
        "livingRmDesc": {
          "type": "string",
          "description": "Living room description."
        },
        "bedroomDesc": {
          "type": "string",
          "description": "Bedroom description."
        },
        "bathroomDesc": {
          "type": "string",
          "description": "Bathroom description."
        }
      },
      "description": "Rooms."
    },
    "v1School": {
      "type": "object",
      "properties": {
        "schoolDistrict": {
          "type": "string"
        },
        "elementarySchool": {
          "type": "string",
          "description": "The name of the primary school having a catchment area that includes the associated property."
        },
        "elementarySchoolDistrict": {
          "type": "string",
          "description": "The name of the elementary school district having a catchment area that includes the associated property."
        },
        "middleOrJuniorSchool": {
          "type": "string",
          "description": "The name of the junior or middle school having a catchment area that includes the associated property."
        },
        "highSchool": {
          "type": "string",
          "description": "The name of the high school having a catchment area that includes the associated property."
        },
        "highSchoolDistrict": {
          "type": "string",
          "description": "The name of the high school district having a catchment area that includes the associated property."
        },
        "middleOrJuniorSchoolDistrict": {
          "type": "string",
          "description": "The name of the junior or middle school district having a catchment area that includes the associated property."
        },
        "sdUnifId": {
          "type": "string",
          "description": "School unified district id from third party data (Internal)."
        },
        "sdElemId": {
          "type": "string",
          "description": "School unified district id from third party data (Internal)."
        },
        "sdSecId": {
          "type": "string",
          "description": "School unified district id from third party data (Internal)."
        },
        "sazElemId": {
          "type": "string",
          "description": "School unified district id from third party data (Internal)."
        },
        "sazMiddleId": {
          "type": "string",
          "description": "School unified district id from third party data (Internal)."
        },
        "sazHighId": {
          "type": "string",
          "description": "School unified district id from third party data (Internal)."
        }
      },
      "description": "School."
    },
    "v1SearchMlsListingsResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MlsListing"
          },
          "description": "List of listings."
        }
      },
      "description": "Response for search mls listings."
    },
    "v1SearchQuery": {
      "type": "object",
      "properties": {
        "listingId": {
          "type": "string",
          "description": "Search by listing id."
        }
      }
    },
    "v1SpecialListingConditions": {
      "type": "object",
      "properties": {
        "isForeclosure": {
          "type": "boolean",
          "description": "Is the listed property currently in the process of foreclosure."
        },
        "isShortSale": {
          "type": "boolean",
          "description": "Is the listing a short sale (short pay) and may require bank approval."
        },
        "isProbateSale": {
          "type": "boolean",
          "description": "Is the listed property a probate sale."
        }
      },
      "description": "This group provides informations for sale type. i.e. Standard, REO, Short Sale, Probate, Auction, NOD, etc., at the time of listing."
    },
    "v1StreamMlsListingEventResponse": {
      "type": "object",
      "properties": {
        "mlsChange": {
          "$ref": "#/definitions/v1MlsChange",
          "description": "Has meta data about the mls change events."
        },
        "mlsListing": {
          "$ref": "#/definitions/v1MlsListing",
          "description": "Mls Listing data thats changed."
        },
        "mlsId": {
          "type": "string",
          "description": "Unique id of a mls listing data."
        }
      },
      "description": "Response for streaming listing changes or events."
    },
    "v1Structure": {
      "type": "object",
      "properties": {
        "architectureStyle": {
          "type": "string"
        },
        "heating": {
          "type": "string",
          "description": "A list describing the heating features of the property."
        },
        "cooling": {
          "type": "string",
          "description": "A list describing the cooling or air conditioning features of the property."
        },
        "constructionMaterials": {
          "type": "string",
          "description": "A list of the materials that were used in the construction of the property."
        },
        "flooring": {
          "type": "string",
          "description": "A list of the type(s) of flooring found within the property."
        },
        "levels": {
          "type": "string",
          "description": "The number of levels in the property being sold. For example, One Level, Two Levels, Three or More Levels, Multi/Split, Loft. A discreet horizontal plane of interior living space (excluding basements)."
        },
        "bedroomsTotal": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of bedrooms in the dwelling."
        },
        "bathroomsFull": {
          "type": "integer",
          "format": "int32",
          "description": "A room containing all 4 of the 4 elements constituting a bath, which are; Toilet, Sink, Bathtub or Shower Head. A Full Bath will typically contain four elements; Sink, Toilet, Tub and Shower Head (in tub or stall).\nHowever, some may considered a Sink, Toilet and Tub (without a shower) a Full Bath, others consider this to be a Three Quarter Bath."
        },
        "bathroomsPartial": {
          "type": "integer",
          "format": "int32",
          "description": "The number of partial bathrooms in the property being sold/leased. When used in combination with the BathroomsFull field, this replaces (or is the sum of) all Half and One Quarter bathrooms; \nand in the event BathroomsThreeQuarter is not used, BathroomsFull replaces (or is the sum of) all Full and Three Quarter baths."
        },
        "bathroomsOnequarter": {
          "type": "integer",
          "format": "int32",
          "description": "A room containing 1 of the 4 elements constituting a bath which are; Toilet, Sink, Bathtub or Shower Head. Examples are a vanity with a sink or a WC (Water Closet, which is a room with only a toilet)."
        },
        "bathroomsThreequarter": {
          "type": "integer",
          "format": "int32",
          "description": "A room containing 3 of the 4 elements constituting a bath, which are; Toilet, Sink, Bathtub or Shower Head. A typical Three Quarter Bath will contain Sink, Toilet and Shower. \nSome may considered a Sink, Toilet and Tub (without a shower) a Three Quarter Bath, others consider this to be a Full Bath."
        },
        "bathroomsHalf": {
          "type": "integer",
          "format": "int32",
          "description": "A room containing 2 of the 4 elements constituting a bath, which are; Toilet, Sink, Bathtub or Shower Head. A Half Bath will typically contain a Sink and Toilet."
        },
        "buildingName": {
          "type": "string",
          "description": "Name of the building or business park."
        },
        "buildingFeatures": {
          "type": "string",
          "description": "Features or amenities of the building or business park."
        },
        "buildingAreaTotal": {
          "type": "number",
          "format": "double",
          "description": "Total area of the structure. Includes both finished and unfinished areas."
        },
        "buildingAreaSource": {
          "type": "string",
          "description": "The source of the measurements. This is a pick list of options showing the source of the measurement. i.e. Agent, Assessor, Estimate, etc."
        },
        "livingArea": {
          "type": "integer",
          "format": "int32",
          "description": "The total livable area within the structure."
        },
        "roof": {
          "type": "string",
          "description": "A list describing the type or style of roof. For example Spanish Tile, Composite, Shake, etc."
        },
        "parkingFeatures": {
          "type": "string",
          "description": "A list of features or description of the parking included in the sale/lease."
        },
        "parkingTotal": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of parking spaces included in the sale."
        },
        "otherParking": {
          "type": "string",
          "description": "Other types of parking available to, or part of, the property."
        },
        "otherParkingSpaces": {
          "type": "string"
        },
        "garageSpaces": {
          "type": "integer",
          "format": "int32",
          "description": "The number of spaces in the garage(s)."
        },
        "carportSpaces": {
          "type": "integer",
          "format": "int32",
          "description": "The number of carport spaces included in the sale."
        },
        "coveredSpaces": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of garage and carport spaces."
        },
        "openParkingSpaces": {
          "type": "integer",
          "format": "int32",
          "description": "The number of open or uncovered parking spaces included in the sale."
        },
        "yearBuilt": {
          "type": "integer",
          "format": "int32",
          "description": "The year that an occupancy permit is first granted for the house or other local measure of initial habitability of the build. \nThe type definition permits an empty value with an attribute noting that it is an unknown date or that the building is new construction. \nWhile constraints have not been applied, convention at the time of adoption has this as a four (4) digit year value."
        },
        "storiesTotal": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of floors in the building. In the case of multi-dwelling structures, this is the entire structure and not the individual dwelling being sold."
        },
        "fireplace": {
          "type": "boolean",
          "description": "Does the property include a fireplace."
        },
        "fireplaceFeatures": {
          "type": "string",
          "description": "A list of features or description of the fireplace(s) included in the sale/lease."
        },
        "fireplaceTotal": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of fireplaces included in the property."
        },
        "doorFeatures": {
          "type": "string",
          "description": "A list of features or description of the doors included in the sale/lease."
        },
        "foundationDetails": {
          "type": "string",
          "description": "A list of the type(s) of foundation on which the property sits."
        },
        "insulationDesc": {
          "type": "string"
        },
        "roomType": {
          "type": "string"
        },
        "builderName": {
          "type": "string",
          "description": "Name of the builder of the property or builder's tract."
        },
        "accessibilityFeatures": {
          "type": "string",
          "description": "A list or description of the accessibility features included in the sale/lease."
        },
        "floodArea": {
          "type": "string"
        },
        "homeownersProtPlan": {
          "type": "string"
        },
        "exteriorFeatures": {
          "type": "string",
          "description": "A list of features or description of the exterior of the property included in the sale/lease."
        },
        "interiorFeatures": {
          "type": "string",
          "description": "A list of features or description of the interior of the property included in the sale/lease."
        },
        "bodyType": {
          "type": "string",
          "description": "Type of mobile/manufactured home."
        },
        "basement": {
          "type": "string",
          "description": "A list of information and features about the basement. i.e. None/Slab, Finished, Partially Finished, Crawl Space, Dirt, Outside Entrance, Radon Mitigation."
        },
        "otherStructures": {
          "type": "string",
          "description": "A list of structures other than the main dwelling. For example, Guest House, Barn, Shed, etc."
        },
        "builderModel": {
          "type": "string",
          "description": "The builders model name or number for the property."
        },
        "structureType": {
          "type": "string",
          "description": "The type of structure that the property completely or partially encompasses.  For example, House or Cabin are the overall structure and typically sold or leased as a whole.  \nMulti Family and Docks may be sold in whole, but are often sold or leased by unit/slip.  This field is the type of structure as opposed to style, which is under the Architectural Style field."
        },
        "rooms": {
          "$ref": "#/definitions/v1Rooms",
          "description": "A collection of types of rooms and details/features about the room."
        },
        "propertyCondition": {
          "$ref": "#/definitions/v1PropertyCondition",
          "description": "A list describing the condition of the property and any structures included in the sale."
        },
        "approximateOfficeSquarefeet": {
          "type": "number",
          "format": "float"
        },
        "approximateRetailSquarefeet": {
          "type": "number",
          "format": "float"
        },
        "approximateWarehouseSquarefeet": {
          "type": "number",
          "format": "float"
        },
        "totalRestrooms": {
          "type": "integer",
          "format": "int32"
        },
        "load": {
          "type": "string"
        },
        "buildingArea": {
          "type": "number",
          "format": "double",
          "title": "Total area of the structure. Includes both finished and unfinished areas. (This will replace building_area_total)"
        },
        "buildingAreaMeasurement": {
          "type": "string"
        },
        "livingAreaMeasurement": {
          "type": "string"
        },
        "skirt": {
          "type": "string"
        },
        "yearBuiltSource": {
          "type": "string"
        },
        "commonWalls": {
          "type": "string"
        },
        "bathroomsTotalInteger": {
          "type": "integer",
          "format": "int32"
        },
        "make": {
          "type": "string"
        }
      },
      "description": "Structure."
    },
    "v1Tax": {
      "type": "object",
      "properties": {
        "zoning": {
          "type": "string",
          "description": "A division of the city or county into areas of different permissible land uses. This Zone field should be used for the short code that is commonly used."
        },
        "parcelNumber": {
          "type": "string",
          "description": "A number used to uniquely identify a parcel or lot. This number is typically issued by the county or county assessor. The AP number format varies from county to county."
        },
        "taxTract": {
          "type": "string",
          "title": "A type of legal description for land in developed areas where streets or other rights-of-ways delineate large parcels of land referred to as divided into lots on which homes or other types of developments are built. An example would be, \"Lot 12 of Block 45 of Tract 3002 of the City of San Dunes, Desert County.\""
        },
        "taxAnnualAmount": {
          "type": "number",
          "format": "double",
          "description": "The annual property tax amount as of the last assessment made by the taxing authority."
        },
        "taxYear": {
          "type": "integer",
          "format": "int32",
          "description": "The year in with the last assessment of the property value/tax was made."
        },
        "taxOtherAnnualAssessmentAmount": {
          "type": "number",
          "format": "double",
          "description": "Any other annual taxes, not including the tax reported in the TaxAmount field, as of the last assessment made by the taxing authority."
        }
      },
      "description": "Tax."
    },
    "v1UpdateDates": {
      "type": "object",
      "properties": {
        "listingContractDate": {
          "type": "string",
          "format": "date-time",
          "description": "The effective date of the agreement between the seller and the seller's broker. This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS."
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date when the listing agreement will expire. This is the date entered by the agent reflecting when the change occurred, or will occur, contractually, not a timestamp of when the change was made in the MLS. The expiration date of listings, prior to their expiration, cancellation, sale or lease, is confidential information and should be restricted to the agent and their managers, partners or broker."
        },
        "closeDate": {
          "type": "string",
          "format": "date-time",
          "description": "With for-sale listings, the date the purchase agreement was fulfilled. With lease listings, the date the requirements were fulfilled, such as contract and/or deposit. This is the date entered by the agent reflecting when the change occurred contractually, not a timestamp of when the change was made in the MLS."
        },
        "cancellationDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date a listing was canceled."
        },
        "pendingTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The transactional timestamp automatically recorded by the MLS system representing the most recent date/time the listing's status was set to Pending."
        }
      }
    },
    "v1UpdateListing": {
      "type": "object",
      "properties": {
        "standardStatus": {
          "type": "string",
          "description": "status to update."
        },
        "remarks": {
          "$ref": "#/definitions/v1UpdateRemarks",
          "description": "remarks to update."
        },
        "price": {
          "$ref": "#/definitions/v1UpdatePrice",
          "description": "price to update."
        },
        "dates": {
          "$ref": "#/definitions/v1UpdateDates",
          "description": "dates to update."
        }
      },
      "description": "Listing to update. Only list sub-documents/fields here that are allowed to be updated by the UpdateMlsListingByListingId endpoint."
    },
    "v1UpdateMlsListingByListingIdResponse": {
      "type": "object",
      "properties": {
        "mlsListings": {
          "$ref": "#/definitions/v1MlsListing"
        }
      },
      "description": "Response for listings by listing id."
    },
    "v1UpdatePrice": {
      "type": "object",
      "properties": {
        "listPrice": {
          "type": "number",
          "format": "double",
          "description": "The current price of the property as determined by the seller and the seller's broker. For auctions this is the minimum or reserve price."
        },
        "closePrice": {
          "type": "number",
          "format": "double",
          "description": "The amount of money paid by the purchaser to the seller for the property under the agreement."
        }
      }
    },
    "v1UpdateProperty": {
      "type": "object",
      "properties": {
        "listing": {
          "$ref": "#/definitions/v1UpdateListing",
          "description": "listing section of the document to update."
        }
      },
      "description": "Property to update. Only list sub-documents/fields here that are allowed to be updated by the UpdateMlsListingByListingId endpoint."
    },
    "v1UpdateRemarks": {
      "type": "object",
      "properties": {
        "publicRemarks": {
          "type": "string",
          "description": "Text remarks that may be displayed to the public. In an MLS, it is the field where information is entered for the public. This information is intended to be visible on-line. This is typically information that describes the selling points of the building and/or land for sale. Local conditions and rules will determine what such content can contain. Generally, the following information is excluded: any information pertaining to entry to the property, the seller and/or tenant, listing member contact information. In other systems, these remarks will be determined by local business rules."
        },
        "privateRemarks": {
          "type": "string",
          "description": "Remarks that may contain security or proprietary information and should be restricted from public view."
        },
        "sellingComments": {
          "type": "string",
          "description": "Selling comments from an agent (non-reso)."
        }
      },
      "description": "Remarks fields that are allowed to be updated via UpdateMlsListingByListingId endpoint."
    },
    "v1Utilities": {
      "type": "object",
      "properties": {
        "waterSource": {
          "type": "string",
          "description": "A list of the source(s) of water for the property."
        },
        "sewer": {
          "type": "string",
          "description": "A list describing the sewer or septic features of the property."
        },
        "utilities": {
          "type": "string",
          "description": "A list of the utilities for the property being sold/leased."
        },
        "numberOfSeparateElectricmeters": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of separate electric meters on the property."
        },
        "numberOfSeparateGasmeters": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of separate gas meters on the property."
        },
        "numberOfSeparateWatermeters": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of separate water meters on the property."
        }
      },
      "description": "Utilities."
    },
    "v1Websites": {
      "type": "object",
      "properties": {
        "websiteTypeCode": {
          "type": "string",
          "title": "Website type code"
        },
        "websiteTypeDescription": {
          "type": "string",
          "title": "Website description"
        },
        "url": {
          "type": "string",
          "title": "Website url"
        },
        "contentLanguageCode": {
          "type": "string",
          "title": "Website language code"
        },
        "contentLanguageName": {
          "type": "string",
          "title": "Website Language name"
        },
        "websiteName": {
          "type": "string",
          "title": "Website name"
        }
      },
      "title": "Dash Listing Websites"
    }
  }
}
