// Code generated by MockGen. DO NOT EDIT.
// Source: mlslisting/internal/generated/realogy.com/api/mls/v1 (interfaces: MlsListingServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	v1 "mlslisting/internal/generated/realogy.com/api/mls/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMlsListingServiceClient is a mock of MlsListingServiceClient interface.
type MockMlsListingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMlsListingServiceClientMockRecorder
}

// MockMlsListingServiceClientMockRecorder is the mock recorder for MockMlsListingServiceClient.
type MockMlsListingServiceClientMockRecorder struct {
	mock *MockMlsListingServiceClient
}

// NewMockMlsListingServiceClient creates a new mock instance.
func NewMockMlsListingServiceClient(ctrl *gomock.Controller) *MockMlsListingServiceClient {
	mock := &MockMlsListingServiceClient{ctrl: ctrl}
	mock.recorder = &MockMlsListingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMlsListingServiceClient) EXPECT() *MockMlsListingServiceClientMockRecorder {
	return m.recorder
}

// AddMlsListings mocks base method.
func (m *MockMlsListingServiceClient) AddMlsListings(arg0 context.Context, arg1 *v1.MlsListingInput, arg2 ...grpc.CallOption) (*v1.AddListingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMlsListings", varargs...)
	ret0, _ := ret[0].(*v1.AddListingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMlsListings indicates an expected call of AddMlsListings.
func (mr *MockMlsListingServiceClientMockRecorder) AddMlsListings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMlsListings", reflect.TypeOf((*MockMlsListingServiceClient)(nil).AddMlsListings), varargs...)
}

// GetMlsListingByListingGuid mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingByListingGuid(arg0 context.Context, arg1 *v1.GetMlsListingByListingGuidRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingByListingGuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingByListingGuid", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingByListingGuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingByListingGuid indicates an expected call of GetMlsListingByListingGuid.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingByListingGuid(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingByListingGuid", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingByListingGuid), varargs...)
}

// GetMlsListingByListingId mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingByListingId(arg0 context.Context, arg1 *v1.GetMlsListingByListingIdRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingByListingIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingByListingId", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingByListingIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingByListingId indicates an expected call of GetMlsListingByListingId.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingByListingId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingByListingId", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingByListingId), varargs...)
}

// GetMlsListingBySource mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingBySource(arg0 context.Context, arg1 *v1.GetMlsListingsBySourceRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsBySourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingBySource", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsBySourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingBySource indicates an expected call of GetMlsListingBySource.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingBySource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingBySource", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingBySource), varargs...)
}

// GetMlsListingsByAddress mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByAddress(arg0 context.Context, arg1 *v1.GetMlsListingsByAddressRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByAddressResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByAddress", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByAddress indicates an expected call of GetMlsListingsByAddress.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByAddress(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByAddress", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByAddress), varargs...)
}

// GetMlsListingsByAgentGuid mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByAgentGuid(arg0 context.Context, arg1 *v1.GetMlsListingsByAgentGuidRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByAgentGuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByAgentGuid", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByAgentGuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByAgentGuid indicates an expected call of GetMlsListingsByAgentGuid.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByAgentGuid(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByAgentGuid", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByAgentGuid), varargs...)
}

// GetMlsListingsByAgentId mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByAgentId(arg0 context.Context, arg1 *v1.GetMlsListingsByAgentIdRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByAgentIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByAgentId", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByAgentIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByAgentId indicates an expected call of GetMlsListingsByAgentId.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByAgentId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByAgentId", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByAgentId), varargs...)
}

// GetMlsListingsByAgentMasterId mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByAgentMasterId(arg0 context.Context, arg1 *v1.GetMlsListingsByAgentMasterIdRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByAgentMasterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByAgentMasterId", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByAgentMasterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByAgentMasterId indicates an expected call of GetMlsListingsByAgentMasterId.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByAgentMasterId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByAgentMasterId", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByAgentMasterId), varargs...)
}

// GetMlsListingsByCity mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByCity(arg0 context.Context, arg1 *v1.GetMlsListingsByCityRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByCityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByCity", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByCityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByCity indicates an expected call of GetMlsListingsByCity.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByCity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByCity", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByCity), varargs...)
}

// GetMlsListingsByCompanyMasterId mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByCompanyMasterId(arg0 context.Context, arg1 *v1.GetMlsListingsByCompanyMasterIdRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByCompanyMasterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByCompanyMasterId", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByCompanyMasterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByCompanyMasterId indicates an expected call of GetMlsListingsByCompanyMasterId.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByCompanyMasterId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByCompanyMasterId", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByCompanyMasterId), varargs...)
}

// GetMlsListingsByCompanyStaffGuid mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByCompanyStaffGuid(arg0 context.Context, arg1 *v1.GetMlsListingsByCompanyStaffGuidRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByCompanyStaffGuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByCompanyStaffGuid", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByCompanyStaffGuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByCompanyStaffGuid indicates an expected call of GetMlsListingsByCompanyStaffGuid.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByCompanyStaffGuid(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByCompanyStaffGuid", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByCompanyStaffGuid), varargs...)
}

// GetMlsListingsByCompanyStaffId mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByCompanyStaffId(arg0 context.Context, arg1 *v1.GetMlsListingsByCompanyStaffIdRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByCompanyStaffIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByCompanyStaffId", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByCompanyStaffIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByCompanyStaffId indicates an expected call of GetMlsListingsByCompanyStaffId.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByCompanyStaffId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByCompanyStaffId", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByCompanyStaffId), varargs...)
}

// GetMlsListingsByOfficeMasterId mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByOfficeMasterId(arg0 context.Context, arg1 *v1.GetMlsListingsByOfficeMasterIdRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByOfficeMasterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByOfficeMasterId", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByOfficeMasterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByOfficeMasterId indicates an expected call of GetMlsListingsByOfficeMasterId.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByOfficeMasterId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByOfficeMasterId", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByOfficeMasterId), varargs...)
}

// GetMlsListingsByPostalCode mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByPostalCode(arg0 context.Context, arg1 *v1.GetMlsListingsByPostalCodeRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByPostalCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByPostalCode", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByPostalCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByPostalCode indicates an expected call of GetMlsListingsByPostalCode.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByPostalCode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByPostalCode", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByPostalCode), varargs...)
}

// GetMlsListingsByState mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsByState(arg0 context.Context, arg1 *v1.GetMlsListingsByStateRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsByStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsByState", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsByStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsByState indicates an expected call of GetMlsListingsByState.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsByState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsByState", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsByState), varargs...)
}

// GetMlsListingsBySubdivision mocks base method.
func (m *MockMlsListingServiceClient) GetMlsListingsBySubdivision(arg0 context.Context, arg1 *v1.GetMlsListingsBySubdivisionRequest, arg2 ...grpc.CallOption) (*v1.GetMlsListingsBySubdivisionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsListingsBySubdivision", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsListingsBySubdivisionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsListingsBySubdivision indicates an expected call of GetMlsListingsBySubdivision.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsListingsBySubdivision(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsListingsBySubdivision", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsListingsBySubdivision), varargs...)
}

// GetMlsSoldListings mocks base method.
func (m *MockMlsListingServiceClient) GetMlsSoldListings(arg0 context.Context, arg1 *v1.GetMlsSoldListingsRequest, arg2 ...grpc.CallOption) (*v1.GetMlsSoldListingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMlsSoldListings", varargs...)
	ret0, _ := ret[0].(*v1.GetMlsSoldListingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMlsSoldListings indicates an expected call of GetMlsSoldListings.
func (mr *MockMlsListingServiceClientMockRecorder) GetMlsSoldListings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMlsSoldListings", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetMlsSoldListings), varargs...)
}

// GetRealogyListings mocks base method.
func (m *MockMlsListingServiceClient) GetRealogyListings(arg0 context.Context, arg1 *v1.RealogyListingsRequest, arg2 ...grpc.CallOption) (*v1.RealogyListingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRealogyListings", varargs...)
	ret0, _ := ret[0].(*v1.RealogyListingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealogyListings indicates an expected call of GetRealogyListings.
func (mr *MockMlsListingServiceClientMockRecorder) GetRealogyListings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealogyListings", reflect.TypeOf((*MockMlsListingServiceClient)(nil).GetRealogyListings), varargs...)
}

// HealthCheck mocks base method.
func (m *MockMlsListingServiceClient) HealthCheck(arg0 context.Context, arg1 *v1.HealthRequest, arg2 ...grpc.CallOption) (*v1.HealthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthCheck", varargs...)
	ret0, _ := ret[0].(*v1.HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockMlsListingServiceClientMockRecorder) HealthCheck(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockMlsListingServiceClient)(nil).HealthCheck), varargs...)
}

// SearchMlsListings mocks base method.
func (m *MockMlsListingServiceClient) SearchMlsListings(arg0 context.Context, arg1 *v1.SearchMlsListingsRequest, arg2 ...grpc.CallOption) (*v1.SearchMlsListingsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchMlsListings", varargs...)
	ret0, _ := ret[0].(*v1.SearchMlsListingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMlsListings indicates an expected call of SearchMlsListings.
func (mr *MockMlsListingServiceClientMockRecorder) SearchMlsListings(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMlsListings", reflect.TypeOf((*MockMlsListingServiceClient)(nil).SearchMlsListings), varargs...)
}

// StreamMlsListingByCity mocks base method.
func (m *MockMlsListingServiceClient) StreamMlsListingByCity(arg0 context.Context, arg1 *v1.GetMlsListingsByCityRequest, arg2 ...grpc.CallOption) (v1.MlsListingService_StreamMlsListingByCityClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamMlsListingByCity", varargs...)
	ret0, _ := ret[0].(v1.MlsListingService_StreamMlsListingByCityClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamMlsListingByCity indicates an expected call of StreamMlsListingByCity.
func (mr *MockMlsListingServiceClientMockRecorder) StreamMlsListingByCity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMlsListingByCity", reflect.TypeOf((*MockMlsListingServiceClient)(nil).StreamMlsListingByCity), varargs...)
}

// StreamMlsListingByPostalCode mocks base method.
func (m *MockMlsListingServiceClient) StreamMlsListingByPostalCode(arg0 context.Context, arg1 *v1.GetMlsListingsByPostalCodeRequest, arg2 ...grpc.CallOption) (v1.MlsListingService_StreamMlsListingByPostalCodeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamMlsListingByPostalCode", varargs...)
	ret0, _ := ret[0].(v1.MlsListingService_StreamMlsListingByPostalCodeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamMlsListingByPostalCode indicates an expected call of StreamMlsListingByPostalCode.
func (mr *MockMlsListingServiceClientMockRecorder) StreamMlsListingByPostalCode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMlsListingByPostalCode", reflect.TypeOf((*MockMlsListingServiceClient)(nil).StreamMlsListingByPostalCode), varargs...)
}

// StreamMlsListingBySource mocks base method.
func (m *MockMlsListingServiceClient) StreamMlsListingBySource(arg0 context.Context, arg1 *v1.GetMlsListingsBySourceRequest, arg2 ...grpc.CallOption) (v1.MlsListingService_StreamMlsListingBySourceClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamMlsListingBySource", varargs...)
	ret0, _ := ret[0].(v1.MlsListingService_StreamMlsListingBySourceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamMlsListingBySource indicates an expected call of StreamMlsListingBySource.
func (mr *MockMlsListingServiceClientMockRecorder) StreamMlsListingBySource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMlsListingBySource", reflect.TypeOf((*MockMlsListingServiceClient)(nil).StreamMlsListingBySource), varargs...)
}

// StreamMlsListingByState mocks base method.
func (m *MockMlsListingServiceClient) StreamMlsListingByState(arg0 context.Context, arg1 *v1.GetMlsListingsByStateRequest, arg2 ...grpc.CallOption) (v1.MlsListingService_StreamMlsListingByStateClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamMlsListingByState", varargs...)
	ret0, _ := ret[0].(v1.MlsListingService_StreamMlsListingByStateClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamMlsListingByState indicates an expected call of StreamMlsListingByState.
func (mr *MockMlsListingServiceClientMockRecorder) StreamMlsListingByState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMlsListingByState", reflect.TypeOf((*MockMlsListingServiceClient)(nil).StreamMlsListingByState), varargs...)
}

// StreamMlsListingEvent mocks base method.
func (m *MockMlsListingServiceClient) StreamMlsListingEvent(arg0 context.Context, arg1 *v1.StreamMlsListingEventRequest, arg2 ...grpc.CallOption) (v1.MlsListingService_StreamMlsListingEventClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamMlsListingEvent", varargs...)
	ret0, _ := ret[0].(v1.MlsListingService_StreamMlsListingEventClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamMlsListingEvent indicates an expected call of StreamMlsListingEvent.
func (mr *MockMlsListingServiceClientMockRecorder) StreamMlsListingEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMlsListingEvent", reflect.TypeOf((*MockMlsListingServiceClient)(nil).StreamMlsListingEvent), varargs...)
}

// UpdateMlsListingByListingId mocks base method.
func (m *MockMlsListingServiceClient) UpdateMlsListingByListingId(arg0 context.Context, arg1 *v1.UpdateMlsListingByListingIdRequest, arg2 ...grpc.CallOption) (*v1.UpdateMlsListingByListingIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMlsListingByListingId", varargs...)
	ret0, _ := ret[0].(*v1.UpdateMlsListingByListingIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMlsListingByListingId indicates an expected call of UpdateMlsListingByListingId.
func (mr *MockMlsListingServiceClientMockRecorder) UpdateMlsListingByListingId(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMlsListingByListingId", reflect.TypeOf((*MockMlsListingServiceClient)(nil).UpdateMlsListingByListingId), varargs...)
}
