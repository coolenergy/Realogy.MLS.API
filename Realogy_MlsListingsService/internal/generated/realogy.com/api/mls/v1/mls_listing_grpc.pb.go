// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: realogy/api/mls/v1/mls_listing.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MlsListingServiceClient is the client API for MlsListingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MlsListingServiceClient interface {
	// Get Listings for a given Listing Id. This API may return more than one listing for a listing id if the listing is associated to more than one mls source.
	//Use "source" in the request path to narrow the result to particular mls source.
	//ListingId's with hyphen(-) should be converted to underscore (_) internally by the pipeline. Lookup by listing id with hyphen is supported but the response should contain listing id with underscore.
	//For Ex: Both, /mls/listing/RX-10634525 and /mls/listing/RX_10634525 returns same listing. Listing id in the response is going to be "RX_10634525"
	//Additionally, Lookup by listing id with hyphen is supported and the response contain listing id with hyphen.
	GetMlsListingByListingId(ctx context.Context, in *GetMlsListingByListingIdRequest, opts ...grpc.CallOption) (*GetMlsListingByListingIdResponse, error)
	// Update Listings for a given Listing Id. This API may update listing for a listing id if the listing is associated to more than one mls source.
	//Use "source" in the request path to narrow the result to particular mls source.
	UpdateMlsListingByListingId(ctx context.Context, in *UpdateMlsListingByListingIdRequest, opts ...grpc.CallOption) (*UpdateMlsListingByListingIdResponse, error)
	// POST endpoint to allow authorized clients to create a listing. This API creates listing for a listing id if the listing associated to rdmSourceSystemKey .
	AddMlsListings(ctx context.Context, in *MlsListingInput, opts ...grpc.CallOption) (*AddListingsResponse, error)
	// Get Listings for a given Listing Guid (Dash specific unique id for a listing). This API may return multiple listings for a listing id if there are multiple mls sources associated.
	//Use "source" in the request path to narrow the result to particular mls source.
	GetMlsListingByListingGuid(ctx context.Context, in *GetMlsListingByListingGuidRequest, opts ...grpc.CallOption) (*GetMlsListingByListingGuidResponse, error)
	// Get Listings for a given mls source name. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//lastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp. Deltas can be fetched upto last 30 days.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingBySource(ctx context.Context, in *GetMlsListingsBySourceRequest, opts ...grpc.CallOption) (*GetMlsListingsBySourceResponse, error)
	// Get Listings for a given City and State. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByCity(ctx context.Context, in *GetMlsListingsByCityRequest, opts ...grpc.CallOption) (*GetMlsListingsByCityResponse, error)
	// Get Listings for a given State. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByState(ctx context.Context, in *GetMlsListingsByStateRequest, opts ...grpc.CallOption) (*GetMlsListingsByStateResponse, error)
	// Get Listings for a given Postal Code. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByPostalCode(ctx context.Context, in *GetMlsListingsByPostalCodeRequest, opts ...grpc.CallOption) (*GetMlsListingsByPostalCodeResponse, error)
	// Get Listings for a given Mls AgentId. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByAgentId(ctx context.Context, in *GetMlsListingsByAgentIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByAgentIdResponse, error)
	// Get Listings for a given List Agent Master Id.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByAgentMasterId(ctx context.Context, in *GetMlsListingsByAgentMasterIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByAgentMasterIdResponse, error)
	// Get Listings for a given List OfficeMaster Id.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByOfficeMasterId(ctx context.Context, in *GetMlsListingsByOfficeMasterIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByOfficeMasterIdResponse, error)
	// Get Listings for a given Listing Agent Guid (DashMls). By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByAgentGuid(ctx context.Context, in *GetMlsListingsByAgentGuidRequest, opts ...grpc.CallOption) (*GetMlsListingsByAgentGuidResponse, error)
	// Experimental API. Get Listings for a given address. This api returns listings for a matching unparsed address in text format.
	//By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByAddress(ctx context.Context, in *GetMlsListingsByAddressRequest, opts ...grpc.CallOption) (*GetMlsListingsByAddressResponse, error)
	// Get Listings for a given Subdivision. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsBySubdivision(ctx context.Context, in *GetMlsListingsBySubdivisionRequest, opts ...grpc.CallOption) (*GetMlsListingsBySubdivisionResponse, error)
	// Get Listings for a given List Company Master Id.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByCompanyMasterId(ctx context.Context, in *GetMlsListingsByCompanyMasterIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByCompanyMasterIdResponse, error)
	// Get Listings for a given Company Staff Id. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByCompanyStaffId(ctx context.Context, in *GetMlsListingsByCompanyStaffIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByCompanyStaffIdResponse, error)
	// Get Listings for a given Company Staff Guid. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByCompanyStaffGuid(ctx context.Context, in *GetMlsListingsByCompanyStaffGuidRequest, opts ...grpc.CallOption) (*GetMlsListingsByCompanyStaffGuidResponse, error)
	// Get Sold Listings data for the given date range(Valid Formats: 2020-01-01, 2020-01-01T01:01:01.000Z). If start and end date are not specified, the default is last 6 months from the current date.
	//startDate and endDate are optional. If the startDate exists and the endDate is not provided, the api will consider end date to be 6 months from the start date.
	//Offset is the point at which the sold listings should be returned and limit is the size of the sold listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsSoldListings(ctx context.Context, in *GetMlsSoldListingsRequest, opts ...grpc.CallOption) (*GetMlsSoldListingsResponse, error)
	// Stream Listings for a given mls source name. This api is a streaming variation of listings by source.
	//Use http2 to stream the response. Default idle timeout is 120 seconds.
	StreamMlsListingBySource(ctx context.Context, in *GetMlsListingsBySourceRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingBySourceClient, error)
	// Stream Listings for a given City and State. This api is a streaming variation of listings by city and state.
	//Use http2 to stream the response. Default idle timeout is 120 seconds.
	StreamMlsListingByCity(ctx context.Context, in *GetMlsListingsByCityRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingByCityClient, error)
	// Stream Listings for a given State.  This api is a streaming variation of listings by state.
	//Use http2 to stream the response. Default idle timeout is 120 seconds.
	StreamMlsListingByState(ctx context.Context, in *GetMlsListingsByStateRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingByStateClient, error)
	// Stream Listings for a given Postal Code. This api is a streaming variation of listings by postal code.
	//Use http2 to stream the response. Default idle timeout is 120 seconds.
	StreamMlsListingByPostalCode(ctx context.Context, in *GetMlsListingsByPostalCodeRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingByPostalCodeClient, error)
	// Listings changes or events streaming API. By default, this api streams all the events related to mls listings in real time using http2.
	//Reponse of this api encloses mls listings with event meta data(mlsChange) with attributes,
	//1. "marker" - Unique id for an event. This id can be used as query param in the request(marker=<marker id of previous successful change>) to resume the changes in case of failure,
	//2. "changeType" - MLS Change Type (insert, update, replace, delete),
	//3. "changeTime" - MLS Change Time.
	//Default idle timeout is 120 seconds.
	StreamMlsListingEvent(ctx context.Context, in *StreamMlsListingEventRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingEventClient, error)
	// Search listings endpoint can be used to lookup listings using various attributes. Use "offset & limit" to paginate result.
	//lastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned.
	//Default offset is 0 and defaukt limit is 20 listings. Maximum limit in a request is 250.
	SearchMlsListings(ctx context.Context, in *SearchMlsListingsRequest, opts ...grpc.CallOption) (*SearchMlsListingsResponse, error)
	// Realogy listings endpoint can be used to lookup listings using various attributes. Use "offset & limit" to paginate result.
	//lastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned.
	//Default offset is 0 and default limit is 20 listings. Maximum limit in a request is 250.
	GetRealogyListings(ctx context.Context, in *RealogyListingsRequest, opts ...grpc.CallOption) (*RealogyListingsResponse, error)
	// Health Check.
	HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type mlsListingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMlsListingServiceClient(cc grpc.ClientConnInterface) MlsListingServiceClient {
	return &mlsListingServiceClient{cc}
}

func (c *mlsListingServiceClient) GetMlsListingByListingId(ctx context.Context, in *GetMlsListingByListingIdRequest, opts ...grpc.CallOption) (*GetMlsListingByListingIdResponse, error) {
	out := new(GetMlsListingByListingIdResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingByListingId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) UpdateMlsListingByListingId(ctx context.Context, in *UpdateMlsListingByListingIdRequest, opts ...grpc.CallOption) (*UpdateMlsListingByListingIdResponse, error) {
	out := new(UpdateMlsListingByListingIdResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/UpdateMlsListingByListingId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) AddMlsListings(ctx context.Context, in *MlsListingInput, opts ...grpc.CallOption) (*AddListingsResponse, error) {
	out := new(AddListingsResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/AddMlsListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingByListingGuid(ctx context.Context, in *GetMlsListingByListingGuidRequest, opts ...grpc.CallOption) (*GetMlsListingByListingGuidResponse, error) {
	out := new(GetMlsListingByListingGuidResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingByListingGuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingBySource(ctx context.Context, in *GetMlsListingsBySourceRequest, opts ...grpc.CallOption) (*GetMlsListingsBySourceResponse, error) {
	out := new(GetMlsListingsBySourceResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingBySource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByCity(ctx context.Context, in *GetMlsListingsByCityRequest, opts ...grpc.CallOption) (*GetMlsListingsByCityResponse, error) {
	out := new(GetMlsListingsByCityResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByState(ctx context.Context, in *GetMlsListingsByStateRequest, opts ...grpc.CallOption) (*GetMlsListingsByStateResponse, error) {
	out := new(GetMlsListingsByStateResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByPostalCode(ctx context.Context, in *GetMlsListingsByPostalCodeRequest, opts ...grpc.CallOption) (*GetMlsListingsByPostalCodeResponse, error) {
	out := new(GetMlsListingsByPostalCodeResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByPostalCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByAgentId(ctx context.Context, in *GetMlsListingsByAgentIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByAgentIdResponse, error) {
	out := new(GetMlsListingsByAgentIdResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByAgentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByAgentMasterId(ctx context.Context, in *GetMlsListingsByAgentMasterIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByAgentMasterIdResponse, error) {
	out := new(GetMlsListingsByAgentMasterIdResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByAgentMasterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByOfficeMasterId(ctx context.Context, in *GetMlsListingsByOfficeMasterIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByOfficeMasterIdResponse, error) {
	out := new(GetMlsListingsByOfficeMasterIdResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByOfficeMasterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByAgentGuid(ctx context.Context, in *GetMlsListingsByAgentGuidRequest, opts ...grpc.CallOption) (*GetMlsListingsByAgentGuidResponse, error) {
	out := new(GetMlsListingsByAgentGuidResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByAgentGuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByAddress(ctx context.Context, in *GetMlsListingsByAddressRequest, opts ...grpc.CallOption) (*GetMlsListingsByAddressResponse, error) {
	out := new(GetMlsListingsByAddressResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsBySubdivision(ctx context.Context, in *GetMlsListingsBySubdivisionRequest, opts ...grpc.CallOption) (*GetMlsListingsBySubdivisionResponse, error) {
	out := new(GetMlsListingsBySubdivisionResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsBySubdivision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByCompanyMasterId(ctx context.Context, in *GetMlsListingsByCompanyMasterIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByCompanyMasterIdResponse, error) {
	out := new(GetMlsListingsByCompanyMasterIdResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByCompanyMasterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByCompanyStaffId(ctx context.Context, in *GetMlsListingsByCompanyStaffIdRequest, opts ...grpc.CallOption) (*GetMlsListingsByCompanyStaffIdResponse, error) {
	out := new(GetMlsListingsByCompanyStaffIdResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByCompanyStaffId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsListingsByCompanyStaffGuid(ctx context.Context, in *GetMlsListingsByCompanyStaffGuidRequest, opts ...grpc.CallOption) (*GetMlsListingsByCompanyStaffGuidResponse, error) {
	out := new(GetMlsListingsByCompanyStaffGuidResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByCompanyStaffGuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetMlsSoldListings(ctx context.Context, in *GetMlsSoldListingsRequest, opts ...grpc.CallOption) (*GetMlsSoldListingsResponse, error) {
	out := new(GetMlsSoldListingsResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetMlsSoldListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) StreamMlsListingBySource(ctx context.Context, in *GetMlsListingsBySourceRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingBySourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &MlsListingService_ServiceDesc.Streams[0], "/realogy.api.mls.v1.MlsListingService/StreamMlsListingBySource", opts...)
	if err != nil {
		return nil, err
	}
	x := &mlsListingServiceStreamMlsListingBySourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MlsListingService_StreamMlsListingBySourceClient interface {
	Recv() (*MlsListing, error)
	grpc.ClientStream
}

type mlsListingServiceStreamMlsListingBySourceClient struct {
	grpc.ClientStream
}

func (x *mlsListingServiceStreamMlsListingBySourceClient) Recv() (*MlsListing, error) {
	m := new(MlsListing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mlsListingServiceClient) StreamMlsListingByCity(ctx context.Context, in *GetMlsListingsByCityRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingByCityClient, error) {
	stream, err := c.cc.NewStream(ctx, &MlsListingService_ServiceDesc.Streams[1], "/realogy.api.mls.v1.MlsListingService/StreamMlsListingByCity", opts...)
	if err != nil {
		return nil, err
	}
	x := &mlsListingServiceStreamMlsListingByCityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MlsListingService_StreamMlsListingByCityClient interface {
	Recv() (*MlsListing, error)
	grpc.ClientStream
}

type mlsListingServiceStreamMlsListingByCityClient struct {
	grpc.ClientStream
}

func (x *mlsListingServiceStreamMlsListingByCityClient) Recv() (*MlsListing, error) {
	m := new(MlsListing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mlsListingServiceClient) StreamMlsListingByState(ctx context.Context, in *GetMlsListingsByStateRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingByStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &MlsListingService_ServiceDesc.Streams[2], "/realogy.api.mls.v1.MlsListingService/StreamMlsListingByState", opts...)
	if err != nil {
		return nil, err
	}
	x := &mlsListingServiceStreamMlsListingByStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MlsListingService_StreamMlsListingByStateClient interface {
	Recv() (*MlsListing, error)
	grpc.ClientStream
}

type mlsListingServiceStreamMlsListingByStateClient struct {
	grpc.ClientStream
}

func (x *mlsListingServiceStreamMlsListingByStateClient) Recv() (*MlsListing, error) {
	m := new(MlsListing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mlsListingServiceClient) StreamMlsListingByPostalCode(ctx context.Context, in *GetMlsListingsByPostalCodeRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingByPostalCodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MlsListingService_ServiceDesc.Streams[3], "/realogy.api.mls.v1.MlsListingService/StreamMlsListingByPostalCode", opts...)
	if err != nil {
		return nil, err
	}
	x := &mlsListingServiceStreamMlsListingByPostalCodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MlsListingService_StreamMlsListingByPostalCodeClient interface {
	Recv() (*MlsListing, error)
	grpc.ClientStream
}

type mlsListingServiceStreamMlsListingByPostalCodeClient struct {
	grpc.ClientStream
}

func (x *mlsListingServiceStreamMlsListingByPostalCodeClient) Recv() (*MlsListing, error) {
	m := new(MlsListing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mlsListingServiceClient) StreamMlsListingEvent(ctx context.Context, in *StreamMlsListingEventRequest, opts ...grpc.CallOption) (MlsListingService_StreamMlsListingEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &MlsListingService_ServiceDesc.Streams[4], "/realogy.api.mls.v1.MlsListingService/StreamMlsListingEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &mlsListingServiceStreamMlsListingEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MlsListingService_StreamMlsListingEventClient interface {
	Recv() (*StreamMlsListingEventResponse, error)
	grpc.ClientStream
}

type mlsListingServiceStreamMlsListingEventClient struct {
	grpc.ClientStream
}

func (x *mlsListingServiceStreamMlsListingEventClient) Recv() (*StreamMlsListingEventResponse, error) {
	m := new(StreamMlsListingEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mlsListingServiceClient) SearchMlsListings(ctx context.Context, in *SearchMlsListingsRequest, opts ...grpc.CallOption) (*SearchMlsListingsResponse, error) {
	out := new(SearchMlsListingsResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/SearchMlsListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) GetRealogyListings(ctx context.Context, in *RealogyListingsRequest, opts ...grpc.CallOption) (*RealogyListingsResponse, error) {
	out := new(RealogyListingsResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/GetRealogyListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mlsListingServiceClient) HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/realogy.api.mls.v1.MlsListingService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MlsListingServiceServer is the server API for MlsListingService service.
// All implementations must embed UnimplementedMlsListingServiceServer
// for forward compatibility
type MlsListingServiceServer interface {
	// Get Listings for a given Listing Id. This API may return more than one listing for a listing id if the listing is associated to more than one mls source.
	//Use "source" in the request path to narrow the result to particular mls source.
	//ListingId's with hyphen(-) should be converted to underscore (_) internally by the pipeline. Lookup by listing id with hyphen is supported but the response should contain listing id with underscore.
	//For Ex: Both, /mls/listing/RX-10634525 and /mls/listing/RX_10634525 returns same listing. Listing id in the response is going to be "RX_10634525"
	//Additionally, Lookup by listing id with hyphen is supported and the response contain listing id with hyphen.
	GetMlsListingByListingId(context.Context, *GetMlsListingByListingIdRequest) (*GetMlsListingByListingIdResponse, error)
	// Update Listings for a given Listing Id. This API may update listing for a listing id if the listing is associated to more than one mls source.
	//Use "source" in the request path to narrow the result to particular mls source.
	UpdateMlsListingByListingId(context.Context, *UpdateMlsListingByListingIdRequest) (*UpdateMlsListingByListingIdResponse, error)
	// POST endpoint to allow authorized clients to create a listing. This API creates listing for a listing id if the listing associated to rdmSourceSystemKey .
	AddMlsListings(context.Context, *MlsListingInput) (*AddListingsResponse, error)
	// Get Listings for a given Listing Guid (Dash specific unique id for a listing). This API may return multiple listings for a listing id if there are multiple mls sources associated.
	//Use "source" in the request path to narrow the result to particular mls source.
	GetMlsListingByListingGuid(context.Context, *GetMlsListingByListingGuidRequest) (*GetMlsListingByListingGuidResponse, error)
	// Get Listings for a given mls source name. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//lastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp. Deltas can be fetched upto last 30 days.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingBySource(context.Context, *GetMlsListingsBySourceRequest) (*GetMlsListingsBySourceResponse, error)
	// Get Listings for a given City and State. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByCity(context.Context, *GetMlsListingsByCityRequest) (*GetMlsListingsByCityResponse, error)
	// Get Listings for a given State. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByState(context.Context, *GetMlsListingsByStateRequest) (*GetMlsListingsByStateResponse, error)
	// Get Listings for a given Postal Code. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByPostalCode(context.Context, *GetMlsListingsByPostalCodeRequest) (*GetMlsListingsByPostalCodeResponse, error)
	// Get Listings for a given Mls AgentId. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByAgentId(context.Context, *GetMlsListingsByAgentIdRequest) (*GetMlsListingsByAgentIdResponse, error)
	// Get Listings for a given List Agent Master Id.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByAgentMasterId(context.Context, *GetMlsListingsByAgentMasterIdRequest) (*GetMlsListingsByAgentMasterIdResponse, error)
	// Get Listings for a given List OfficeMaster Id.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByOfficeMasterId(context.Context, *GetMlsListingsByOfficeMasterIdRequest) (*GetMlsListingsByOfficeMasterIdResponse, error)
	// Get Listings for a given Listing Agent Guid (DashMls). By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByAgentGuid(context.Context, *GetMlsListingsByAgentGuidRequest) (*GetMlsListingsByAgentGuidResponse, error)
	// Experimental API. Get Listings for a given address. This api returns listings for a matching unparsed address in text format.
	//By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByAddress(context.Context, *GetMlsListingsByAddressRequest) (*GetMlsListingsByAddressResponse, error)
	// Get Listings for a given Subdivision. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsBySubdivision(context.Context, *GetMlsListingsBySubdivisionRequest) (*GetMlsListingsBySubdivisionResponse, error)
	// Get Listings for a given List Company Master Id.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByCompanyMasterId(context.Context, *GetMlsListingsByCompanyMasterIdRequest) (*GetMlsListingsByCompanyMasterIdResponse, error)
	// Get Listings for a given Company Staff Id. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByCompanyStaffId(context.Context, *GetMlsListingsByCompanyStaffIdRequest) (*GetMlsListingsByCompanyStaffIdResponse, error)
	// Get Listings for a given Company Staff Guid. By default this api returns maximum of 20 listings. Use "offset & limit" in the request as query parameter to return more listings.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsListingsByCompanyStaffGuid(context.Context, *GetMlsListingsByCompanyStaffGuidRequest) (*GetMlsListingsByCompanyStaffGuidResponse, error)
	// Get Sold Listings data for the given date range(Valid Formats: 2020-01-01, 2020-01-01T01:01:01.000Z). If start and end date are not specified, the default is last 6 months from the current date.
	//startDate and endDate are optional. If the startDate exists and the endDate is not provided, the api will consider end date to be 6 months from the start date.
	//Offset is the point at which the sold listings should be returned and limit is the size of the sold listings to be returned. Maximum limit is 250. Resets to max limit if the input is over the allowed max limit.
	GetMlsSoldListings(context.Context, *GetMlsSoldListingsRequest) (*GetMlsSoldListingsResponse, error)
	// Stream Listings for a given mls source name. This api is a streaming variation of listings by source.
	//Use http2 to stream the response. Default idle timeout is 120 seconds.
	StreamMlsListingBySource(*GetMlsListingsBySourceRequest, MlsListingService_StreamMlsListingBySourceServer) error
	// Stream Listings for a given City and State. This api is a streaming variation of listings by city and state.
	//Use http2 to stream the response. Default idle timeout is 120 seconds.
	StreamMlsListingByCity(*GetMlsListingsByCityRequest, MlsListingService_StreamMlsListingByCityServer) error
	// Stream Listings for a given State.  This api is a streaming variation of listings by state.
	//Use http2 to stream the response. Default idle timeout is 120 seconds.
	StreamMlsListingByState(*GetMlsListingsByStateRequest, MlsListingService_StreamMlsListingByStateServer) error
	// Stream Listings for a given Postal Code. This api is a streaming variation of listings by postal code.
	//Use http2 to stream the response. Default idle timeout is 120 seconds.
	StreamMlsListingByPostalCode(*GetMlsListingsByPostalCodeRequest, MlsListingService_StreamMlsListingByPostalCodeServer) error
	// Listings changes or events streaming API. By default, this api streams all the events related to mls listings in real time using http2.
	//Reponse of this api encloses mls listings with event meta data(mlsChange) with attributes,
	//1. "marker" - Unique id for an event. This id can be used as query param in the request(marker=<marker id of previous successful change>) to resume the changes in case of failure,
	//2. "changeType" - MLS Change Type (insert, update, replace, delete),
	//3. "changeTime" - MLS Change Time.
	//Default idle timeout is 120 seconds.
	StreamMlsListingEvent(*StreamMlsListingEventRequest, MlsListingService_StreamMlsListingEventServer) error
	// Search listings endpoint can be used to lookup listings using various attributes. Use "offset & limit" to paginate result.
	//lastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned.
	//Default offset is 0 and defaukt limit is 20 listings. Maximum limit in a request is 250.
	SearchMlsListings(context.Context, *SearchMlsListingsRequest) (*SearchMlsListingsResponse, error)
	// Realogy listings endpoint can be used to lookup listings using various attributes. Use "offset & limit" to paginate result.
	//lastChangeTimestamp can be used to get listings delta changes. Timestamp has to be in UTC format. For ex: 2021-09-09T00:00:00.000Z. Endpoint ignores nano seconds in the timestamp.
	//Offset is the point at which the mls listings should be returned and limit is the size of the mls listings to be returned.
	//Default offset is 0 and default limit is 20 listings. Maximum limit in a request is 250.
	GetRealogyListings(context.Context, *RealogyListingsRequest) (*RealogyListingsResponse, error)
	// Health Check.
	HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedMlsListingServiceServer()
}

// UnimplementedMlsListingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMlsListingServiceServer struct {
}

func (UnimplementedMlsListingServiceServer) GetMlsListingByListingId(context.Context, *GetMlsListingByListingIdRequest) (*GetMlsListingByListingIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingByListingId not implemented")
}
func (UnimplementedMlsListingServiceServer) UpdateMlsListingByListingId(context.Context, *UpdateMlsListingByListingIdRequest) (*UpdateMlsListingByListingIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMlsListingByListingId not implemented")
}
func (UnimplementedMlsListingServiceServer) AddMlsListings(context.Context, *MlsListingInput) (*AddListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMlsListings not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingByListingGuid(context.Context, *GetMlsListingByListingGuidRequest) (*GetMlsListingByListingGuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingByListingGuid not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingBySource(context.Context, *GetMlsListingsBySourceRequest) (*GetMlsListingsBySourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingBySource not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByCity(context.Context, *GetMlsListingsByCityRequest) (*GetMlsListingsByCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByCity not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByState(context.Context, *GetMlsListingsByStateRequest) (*GetMlsListingsByStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByState not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByPostalCode(context.Context, *GetMlsListingsByPostalCodeRequest) (*GetMlsListingsByPostalCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByPostalCode not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByAgentId(context.Context, *GetMlsListingsByAgentIdRequest) (*GetMlsListingsByAgentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByAgentId not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByAgentMasterId(context.Context, *GetMlsListingsByAgentMasterIdRequest) (*GetMlsListingsByAgentMasterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByAgentMasterId not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByOfficeMasterId(context.Context, *GetMlsListingsByOfficeMasterIdRequest) (*GetMlsListingsByOfficeMasterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByOfficeMasterId not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByAgentGuid(context.Context, *GetMlsListingsByAgentGuidRequest) (*GetMlsListingsByAgentGuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByAgentGuid not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByAddress(context.Context, *GetMlsListingsByAddressRequest) (*GetMlsListingsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByAddress not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsBySubdivision(context.Context, *GetMlsListingsBySubdivisionRequest) (*GetMlsListingsBySubdivisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsBySubdivision not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByCompanyMasterId(context.Context, *GetMlsListingsByCompanyMasterIdRequest) (*GetMlsListingsByCompanyMasterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByCompanyMasterId not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByCompanyStaffId(context.Context, *GetMlsListingsByCompanyStaffIdRequest) (*GetMlsListingsByCompanyStaffIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByCompanyStaffId not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsListingsByCompanyStaffGuid(context.Context, *GetMlsListingsByCompanyStaffGuidRequest) (*GetMlsListingsByCompanyStaffGuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsListingsByCompanyStaffGuid not implemented")
}
func (UnimplementedMlsListingServiceServer) GetMlsSoldListings(context.Context, *GetMlsSoldListingsRequest) (*GetMlsSoldListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMlsSoldListings not implemented")
}
func (UnimplementedMlsListingServiceServer) StreamMlsListingBySource(*GetMlsListingsBySourceRequest, MlsListingService_StreamMlsListingBySourceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMlsListingBySource not implemented")
}
func (UnimplementedMlsListingServiceServer) StreamMlsListingByCity(*GetMlsListingsByCityRequest, MlsListingService_StreamMlsListingByCityServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMlsListingByCity not implemented")
}
func (UnimplementedMlsListingServiceServer) StreamMlsListingByState(*GetMlsListingsByStateRequest, MlsListingService_StreamMlsListingByStateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMlsListingByState not implemented")
}
func (UnimplementedMlsListingServiceServer) StreamMlsListingByPostalCode(*GetMlsListingsByPostalCodeRequest, MlsListingService_StreamMlsListingByPostalCodeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMlsListingByPostalCode not implemented")
}
func (UnimplementedMlsListingServiceServer) StreamMlsListingEvent(*StreamMlsListingEventRequest, MlsListingService_StreamMlsListingEventServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMlsListingEvent not implemented")
}
func (UnimplementedMlsListingServiceServer) SearchMlsListings(context.Context, *SearchMlsListingsRequest) (*SearchMlsListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMlsListings not implemented")
}
func (UnimplementedMlsListingServiceServer) GetRealogyListings(context.Context, *RealogyListingsRequest) (*RealogyListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealogyListings not implemented")
}
func (UnimplementedMlsListingServiceServer) HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMlsListingServiceServer) mustEmbedUnimplementedMlsListingServiceServer() {}

// UnsafeMlsListingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MlsListingServiceServer will
// result in compilation errors.
type UnsafeMlsListingServiceServer interface {
	mustEmbedUnimplementedMlsListingServiceServer()
}

func RegisterMlsListingServiceServer(s grpc.ServiceRegistrar, srv MlsListingServiceServer) {
	s.RegisterService(&MlsListingService_ServiceDesc, srv)
}

func _MlsListingService_GetMlsListingByListingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingByListingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingByListingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingByListingId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingByListingId(ctx, req.(*GetMlsListingByListingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_UpdateMlsListingByListingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMlsListingByListingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).UpdateMlsListingByListingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/UpdateMlsListingByListingId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).UpdateMlsListingByListingId(ctx, req.(*UpdateMlsListingByListingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_AddMlsListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MlsListingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).AddMlsListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/AddMlsListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).AddMlsListings(ctx, req.(*MlsListingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingByListingGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingByListingGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingByListingGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingByListingGuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingByListingGuid(ctx, req.(*GetMlsListingByListingGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingBySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsBySourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingBySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingBySource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingBySource(ctx, req.(*GetMlsListingsBySourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByCity(ctx, req.(*GetMlsListingsByCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByState(ctx, req.(*GetMlsListingsByStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByPostalCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByPostalCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByPostalCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByPostalCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByPostalCode(ctx, req.(*GetMlsListingsByPostalCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByAgentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByAgentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByAgentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByAgentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByAgentId(ctx, req.(*GetMlsListingsByAgentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByAgentMasterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByAgentMasterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByAgentMasterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByAgentMasterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByAgentMasterId(ctx, req.(*GetMlsListingsByAgentMasterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByOfficeMasterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByOfficeMasterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByOfficeMasterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByOfficeMasterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByOfficeMasterId(ctx, req.(*GetMlsListingsByOfficeMasterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByAgentGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByAgentGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByAgentGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByAgentGuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByAgentGuid(ctx, req.(*GetMlsListingsByAgentGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByAddress(ctx, req.(*GetMlsListingsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsBySubdivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsBySubdivisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsBySubdivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsBySubdivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsBySubdivision(ctx, req.(*GetMlsListingsBySubdivisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByCompanyMasterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByCompanyMasterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByCompanyMasterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByCompanyMasterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByCompanyMasterId(ctx, req.(*GetMlsListingsByCompanyMasterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByCompanyStaffId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByCompanyStaffIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByCompanyStaffId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByCompanyStaffId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByCompanyStaffId(ctx, req.(*GetMlsListingsByCompanyStaffIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsListingsByCompanyStaffGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsListingsByCompanyStaffGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsListingsByCompanyStaffGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsListingsByCompanyStaffGuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsListingsByCompanyStaffGuid(ctx, req.(*GetMlsListingsByCompanyStaffGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetMlsSoldListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMlsSoldListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetMlsSoldListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetMlsSoldListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetMlsSoldListings(ctx, req.(*GetMlsSoldListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_StreamMlsListingBySource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMlsListingsBySourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MlsListingServiceServer).StreamMlsListingBySource(m, &mlsListingServiceStreamMlsListingBySourceServer{stream})
}

type MlsListingService_StreamMlsListingBySourceServer interface {
	Send(*MlsListing) error
	grpc.ServerStream
}

type mlsListingServiceStreamMlsListingBySourceServer struct {
	grpc.ServerStream
}

func (x *mlsListingServiceStreamMlsListingBySourceServer) Send(m *MlsListing) error {
	return x.ServerStream.SendMsg(m)
}

func _MlsListingService_StreamMlsListingByCity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMlsListingsByCityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MlsListingServiceServer).StreamMlsListingByCity(m, &mlsListingServiceStreamMlsListingByCityServer{stream})
}

type MlsListingService_StreamMlsListingByCityServer interface {
	Send(*MlsListing) error
	grpc.ServerStream
}

type mlsListingServiceStreamMlsListingByCityServer struct {
	grpc.ServerStream
}

func (x *mlsListingServiceStreamMlsListingByCityServer) Send(m *MlsListing) error {
	return x.ServerStream.SendMsg(m)
}

func _MlsListingService_StreamMlsListingByState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMlsListingsByStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MlsListingServiceServer).StreamMlsListingByState(m, &mlsListingServiceStreamMlsListingByStateServer{stream})
}

type MlsListingService_StreamMlsListingByStateServer interface {
	Send(*MlsListing) error
	grpc.ServerStream
}

type mlsListingServiceStreamMlsListingByStateServer struct {
	grpc.ServerStream
}

func (x *mlsListingServiceStreamMlsListingByStateServer) Send(m *MlsListing) error {
	return x.ServerStream.SendMsg(m)
}

func _MlsListingService_StreamMlsListingByPostalCode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMlsListingsByPostalCodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MlsListingServiceServer).StreamMlsListingByPostalCode(m, &mlsListingServiceStreamMlsListingByPostalCodeServer{stream})
}

type MlsListingService_StreamMlsListingByPostalCodeServer interface {
	Send(*MlsListing) error
	grpc.ServerStream
}

type mlsListingServiceStreamMlsListingByPostalCodeServer struct {
	grpc.ServerStream
}

func (x *mlsListingServiceStreamMlsListingByPostalCodeServer) Send(m *MlsListing) error {
	return x.ServerStream.SendMsg(m)
}

func _MlsListingService_StreamMlsListingEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMlsListingEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MlsListingServiceServer).StreamMlsListingEvent(m, &mlsListingServiceStreamMlsListingEventServer{stream})
}

type MlsListingService_StreamMlsListingEventServer interface {
	Send(*StreamMlsListingEventResponse) error
	grpc.ServerStream
}

type mlsListingServiceStreamMlsListingEventServer struct {
	grpc.ServerStream
}

func (x *mlsListingServiceStreamMlsListingEventServer) Send(m *StreamMlsListingEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MlsListingService_SearchMlsListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMlsListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).SearchMlsListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/SearchMlsListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).SearchMlsListings(ctx, req.(*SearchMlsListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_GetRealogyListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealogyListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).GetRealogyListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/GetRealogyListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).GetRealogyListings(ctx, req.(*RealogyListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MlsListingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MlsListingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/realogy.api.mls.v1.MlsListingService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MlsListingServiceServer).HealthCheck(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MlsListingService_ServiceDesc is the grpc.ServiceDesc for MlsListingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MlsListingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realogy.api.mls.v1.MlsListingService",
	HandlerType: (*MlsListingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMlsListingByListingId",
			Handler:    _MlsListingService_GetMlsListingByListingId_Handler,
		},
		{
			MethodName: "UpdateMlsListingByListingId",
			Handler:    _MlsListingService_UpdateMlsListingByListingId_Handler,
		},
		{
			MethodName: "AddMlsListings",
			Handler:    _MlsListingService_AddMlsListings_Handler,
		},
		{
			MethodName: "GetMlsListingByListingGuid",
			Handler:    _MlsListingService_GetMlsListingByListingGuid_Handler,
		},
		{
			MethodName: "GetMlsListingBySource",
			Handler:    _MlsListingService_GetMlsListingBySource_Handler,
		},
		{
			MethodName: "GetMlsListingsByCity",
			Handler:    _MlsListingService_GetMlsListingsByCity_Handler,
		},
		{
			MethodName: "GetMlsListingsByState",
			Handler:    _MlsListingService_GetMlsListingsByState_Handler,
		},
		{
			MethodName: "GetMlsListingsByPostalCode",
			Handler:    _MlsListingService_GetMlsListingsByPostalCode_Handler,
		},
		{
			MethodName: "GetMlsListingsByAgentId",
			Handler:    _MlsListingService_GetMlsListingsByAgentId_Handler,
		},
		{
			MethodName: "GetMlsListingsByAgentMasterId",
			Handler:    _MlsListingService_GetMlsListingsByAgentMasterId_Handler,
		},
		{
			MethodName: "GetMlsListingsByOfficeMasterId",
			Handler:    _MlsListingService_GetMlsListingsByOfficeMasterId_Handler,
		},
		{
			MethodName: "GetMlsListingsByAgentGuid",
			Handler:    _MlsListingService_GetMlsListingsByAgentGuid_Handler,
		},
		{
			MethodName: "GetMlsListingsByAddress",
			Handler:    _MlsListingService_GetMlsListingsByAddress_Handler,
		},
		{
			MethodName: "GetMlsListingsBySubdivision",
			Handler:    _MlsListingService_GetMlsListingsBySubdivision_Handler,
		},
		{
			MethodName: "GetMlsListingsByCompanyMasterId",
			Handler:    _MlsListingService_GetMlsListingsByCompanyMasterId_Handler,
		},
		{
			MethodName: "GetMlsListingsByCompanyStaffId",
			Handler:    _MlsListingService_GetMlsListingsByCompanyStaffId_Handler,
		},
		{
			MethodName: "GetMlsListingsByCompanyStaffGuid",
			Handler:    _MlsListingService_GetMlsListingsByCompanyStaffGuid_Handler,
		},
		{
			MethodName: "GetMlsSoldListings",
			Handler:    _MlsListingService_GetMlsSoldListings_Handler,
		},
		{
			MethodName: "SearchMlsListings",
			Handler:    _MlsListingService_SearchMlsListings_Handler,
		},
		{
			MethodName: "GetRealogyListings",
			Handler:    _MlsListingService_GetRealogyListings_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _MlsListingService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMlsListingBySource",
			Handler:       _MlsListingService_StreamMlsListingBySource_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMlsListingByCity",
			Handler:       _MlsListingService_StreamMlsListingByCity_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMlsListingByState",
			Handler:       _MlsListingService_StreamMlsListingByState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMlsListingByPostalCode",
			Handler:       _MlsListingService_StreamMlsListingByPostalCode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMlsListingEvent",
			Handler:       _MlsListingService_StreamMlsListingEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "realogy/api/mls/v1/mls_listing.proto",
}
